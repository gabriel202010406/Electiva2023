
reproductor_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006758  08006758  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006758  08006758  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006758  08006758  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001324  20000074  080067d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  080067d4  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f2d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361a  00000000  00000000  00039fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef03  00000000  00000000  0003fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c5b  00000000  00000000  0005ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b10  00000000  00000000  000778d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e3e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b4  00000000  00000000  0012e438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800664c 	.word	0x0800664c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800664c 	.word	0x0800664c

080001d0 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	460b      	mov	r3, r1
 80001dc:	71bb      	strb	r3, [r7, #6]
 80001de:	4613      	mov	r3, r2
 80001e0:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	79bb      	ldrb	r3, [r7, #6]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4413      	add	r3, r2
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	797b      	ldrb	r3, [r7, #5]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	4413      	add	r3, r2
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	f203 1305 	addw	r3, r3, #261	; 0x105
 80001fa:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 80001fc:	8afb      	ldrh	r3, [r7, #22]
 80001fe:	425b      	negs	r3, r3
 8000200:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000202:	237e      	movs	r3, #126	; 0x7e
 8000204:	733b      	strb	r3, [r7, #12]
 8000206:	23ff      	movs	r3, #255	; 0xff
 8000208:	737b      	strb	r3, [r7, #13]
 800020a:	2306      	movs	r3, #6
 800020c:	73bb      	strb	r3, [r7, #14]
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	2300      	movs	r3, #0
 8000214:	743b      	strb	r3, [r7, #16]
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	747b      	strb	r3, [r7, #17]
 800021a:	797b      	ldrb	r3, [r7, #5]
 800021c:	74bb      	strb	r3, [r7, #18]
 800021e:	8afb      	ldrh	r3, [r7, #22]
 8000220:	0a1b      	lsrs	r3, r3, #8
 8000222:	b29b      	uxth	r3, r3
 8000224:	b2db      	uxtb	r3, r3
 8000226:	74fb      	strb	r3, [r7, #19]
 8000228:	8afb      	ldrh	r3, [r7, #22]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	753b      	strb	r3, [r7, #20]
 800022e:	23ef      	movs	r3, #239	; 0xef
 8000230:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8000232:	f107 010c 	add.w	r1, r7, #12
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	220a      	movs	r2, #10
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <Send_cmd+0x7c>)
 800023e:	f004 fad3 	bl	80047e8 <HAL_UART_Transmit>
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000558 	.word	0x20000558

08000250 <DF_PlayFromStart>:


void DF_PlayFromStart(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000254:	2201      	movs	r2, #1
 8000256:	2100      	movs	r1, #0
 8000258:	2003      	movs	r0, #3
 800025a:	f7ff ffb9 	bl	80001d0 <Send_cmd>
  HAL_Delay(200);
 800025e:	20c8      	movs	r0, #200	; 0xc8
 8000260:	f000 ffbc 	bl	80011dc <HAL_Delay>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <DF_Init>:


void DF_Init (uint8_t volume)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8000272:	2202      	movs	r2, #2
 8000274:	2100      	movs	r1, #0
 8000276:	203f      	movs	r0, #63	; 0x3f
 8000278:	f7ff ffaa 	bl	80001d0 <Send_cmd>
	HAL_Delay(200);
 800027c:	20c8      	movs	r0, #200	; 0xc8
 800027e:	f000 ffad 	bl	80011dc <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	461a      	mov	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	2006      	movs	r0, #6
 800028a:	f7ff ffa1 	bl	80001d0 <Send_cmd>
	HAL_Delay(500);
 800028e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000292:	f000 ffa3 	bl	80011dc <HAL_Delay>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4a07      	ldr	r2, [pc, #28]	; (80002cc <vApplicationGetIdleTaskMemory+0x2c>)
 80002b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <vApplicationGetIdleTaskMemory+0x30>)
 80002b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000090 	.word	0x20000090
 80002d0:	20000144 	.word	0x20000144

080002d4 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim15,0);
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <delay+0x30>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	625a      	str	r2, [r3, #36]	; 0x24
  while((__HAL_TIM_GET_COUNTER(&htim15))<time);
 80002e6:	bf00      	nop
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <delay+0x30>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ee:	88fb      	ldrh	r3, [r7, #6]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d3f9      	bcc.n	80002e8 <delay+0x14>

}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200004c8 	.word	0x200004c8

08000308 <Set_Pin_Output>:
	float Temperature = 0;
	float Humidity = 0;
	uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000330:	f107 030c 	add.w	r3, r7, #12
 8000334:	4619      	mov	r1, r3
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f001 ff9a 	bl	8002270 <HAL_GPIO_Init>

}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	4619      	mov	r1, r3
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f001 ff7c 	bl	8002270 <HAL_GPIO_Init>
}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <DHT11_Start>:
#define DHT11_PORT GPIOA
#define DHT11_Pin GPIO_PIN_0
void DHT11_Start (void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_Pin);
 8000384:	2101      	movs	r1, #1
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f7ff ffbd 	bl	8000308 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2101      	movs	r1, #1
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f002 f8f5 	bl	8002584 <HAL_GPIO_WritePin>
	delay(18000);
 800039a:	f244 6050 	movw	r0, #18000	; 0x4650
 800039e:	f7ff ff99 	bl	80002d4 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2101      	movs	r1, #1
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003aa:	f002 f8eb 	bl	8002584 <HAL_GPIO_WritePin>
	delay(20);
 80003ae:	2014      	movs	r0, #20
 80003b0:	f7ff ff90 	bl	80002d4 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_Pin);
 80003b4:	2101      	movs	r1, #1
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f7ff ffc3 	bl	8000344 <Set_Pin_Input>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
uint8_t Response = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	71fb      	strb	r3, [r7, #7]
delay (40);
 80003cc:	2028      	movs	r0, #40	; 0x28
 80003ce:	f7ff ff81 	bl	80002d4 <delay>
if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)))
 80003d2:	2101      	movs	r1, #1
 80003d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d8:	f002 f8bc 	bl	8002554 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10f      	bne.n	8000402 <DHT11_Check_Response+0x40>
{
	delay(80);
 80003e2:	2050      	movs	r0, #80	; 0x50
 80003e4:	f7ff ff76 	bl	80002d4 <delay>
	if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin))) Response = 1;
 80003e8:	2101      	movs	r1, #1
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f002 f8b1 	bl	8002554 <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <DHT11_Check_Response+0x3c>
 80003f8:	2301      	movs	r3, #1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	e001      	b.n	8000402 <DHT11_Check_Response+0x40>
	else Response = -1;
 80003fe:	23ff      	movs	r3, #255	; 0xff
 8000400:	71fb      	strb	r3, [r7, #7]
}
while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)));
 8000402:	bf00      	nop
 8000404:	2101      	movs	r1, #1
 8000406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040a:	f002 f8a3 	bl	8002554 <HAL_GPIO_ReadPin>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f7      	bne.n	8000404 <DHT11_Check_Response+0x42>
return Response;
 8000414:	79fb      	ldrb	r3, [r7, #7]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000424:	2300      	movs	r3, #0
 8000426:	71bb      	strb	r3, [r7, #6]
 8000428:	e039      	b.n	800049e <DHT11_Read+0x80>
	{
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)))
		delay (40);
 800042a:	2028      	movs	r0, #40	; 0x28
 800042c:	f7ff ff52 	bl	80002d4 <delay>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)))
 8000430:	2101      	movs	r1, #1
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f002 f88d 	bl	8002554 <HAL_GPIO_ReadPin>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f4      	beq.n	800042a <DHT11_Read+0xc>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)))
 8000440:	2101      	movs	r1, #1
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f002 f885 	bl	8002554 <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d10e      	bne.n	800046e <DHT11_Read+0x50>
		{
			i&= ~(1<<(7-j));
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	f1c3 0307 	rsb	r3, r3, #7
 8000456:	2201      	movs	r2, #1
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	b25b      	sxtb	r3, r3
 800045e:	43db      	mvns	r3, r3
 8000460:	b25a      	sxtb	r2, r3
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	4013      	ands	r3, r2
 8000468:	b25b      	sxtb	r3, r3
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	e00b      	b.n	8000486 <DHT11_Read+0x68>
		}
		else i|= (1<<(7-j));
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	f1c3 0307 	rsb	r3, r3, #7
 8000474:	2201      	movs	r2, #1
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000480:	4313      	orrs	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_Pin)));
 8000486:	bf00      	nop
 8000488:	2101      	movs	r1, #1
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f002 f861 	bl	8002554 <HAL_GPIO_ReadPin>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f7      	bne.n	8000488 <DHT11_Read+0x6a>
	for (j=0;j<8;j++)
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	3301      	adds	r3, #1
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2b07      	cmp	r3, #7
 80004a2:	d9c5      	bls.n	8000430 <DHT11_Read+0x12>
	}

}
 80004a4:	bf00      	nop
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b08e      	sub	sp, #56	; 0x38
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fe5b 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f859 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 fa8f 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c2:	f000 fa5f 	bl	8000984 <MX_DMA_Init>
  MX_ADC1_Init();
 80004c6:	f000 f8b7 	bl	8000638 <MX_ADC1_Init>
  MX_DAC_Init();
 80004ca:	f000 f911 	bl	80006f0 <MX_DAC_Init>
  MX_TIM2_Init();
 80004ce:	f000 f98b 	bl	80007e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004d2:	f000 fa27 	bl	8000924 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004d6:	f000 f935 	bl	8000744 <MX_TIM1_Init>
  MX_TIM15_Init();
 80004da:	f000 f9d1 	bl	8000880 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  DF_Init(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f7ff fec2 	bl	8000268 <DF_Init>
  DF_PlayFromStart();
 80004e4:	f7ff feb4 	bl	8000250 <DF_PlayFromStart>
  HAL_ADC_Start(&hadc1);
 80004e8:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0xa0>)
 80004ea:	f001 f821 	bl	8001530 <HAL_ADC_Start>
  //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &entrada_audio, 1, DAC_ALIGN_12B_R);
  HAL_TIM_Base_Start(&htim2);
 80004ee:	4819      	ldr	r0, [pc, #100]	; (8000554 <main+0xa4>)
 80004f0:	f003 fcf0 	bl	8003ed4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <main+0xa8>)
 80004f6:	f003 fced 	bl	8003ed4 <HAL_TIM_Base_Start>
  HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 80004fa:	2100      	movs	r1, #0
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0xac>)
 80004fe:	f001 fd09 	bl	8001f14 <HAL_DAC_Stop>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorHumedad */
  osThreadDef(SensorHumedad, Task1, osPriorityNormal, 0, 128);
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0xb0>)
 8000504:	f107 041c 	add.w	r4, r7, #28
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorHumedadHandle = osThreadCreate(osThread(SensorHumedad), NULL);
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f004 fd57 	bl	8004fd0 <osThreadCreate>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0xb4>)
 8000526:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorDHT11 */
  osThreadDef(SensorDHT11, Task0, osPriorityNormal, 0, 128);
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0xb8>)
 800052a:	463c      	mov	r4, r7
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorDHT11Handle = osThreadCreate(osThread(SensorDHT11), NULL);
 800053a:	463b      	mov	r3, r7
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fd46 	bl	8004fd0 <osThreadCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <main+0xbc>)
 8000548:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800054a:	f004 fd3a 	bl	8004fc2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	e7fe      	b.n	800054e <main+0x9e>
 8000550:	20000344 	.word	0x20000344
 8000554:	2000047c 	.word	0x2000047c
 8000558:	200004c8 	.word	0x200004c8
 800055c:	200003d8 	.word	0x200003d8
 8000560:	08006680 	.word	0x08006680
 8000564:	200005e0 	.word	0x200005e0
 8000568:	0800669c 	.word	0x0800669c
 800056c:	200005e4 	.word	0x200005e4

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	; 0x70
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 ff9a 	bl	80064b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 ff8c 	bl	80064b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fff4 	bl	80025b4 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 fad9 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f81c 	bl	8003630 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005fe:	f000 fac3 	bl	8000b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <SystemClock_Config+0xc4>)
 8000604:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fa70 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000626:	f000 faaf 	bl	8000b88 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3770      	adds	r7, #112	; 0x70
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	00041081 	.word	0x00041081

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_ADC1_Init+0xb4>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_ADC1_Init+0xb4>)
 800066a:	2201      	movs	r2, #1
 800066c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_ADC1_Init+0xb4>)
 800067e:	2201      	movs	r2, #1
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_ADC1_Init+0xb4>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ADC1_Init+0xb4>)
 8000698:	2204      	movs	r2, #4
 800069a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ADC1_Init+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <MX_ADC1_Init+0xb4>)
 80006aa:	f000 fdbb 	bl	8001224 <HAL_ADC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80006b4:	f000 fa68 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006bc:	2301      	movs	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80006c4:	2307      	movs	r3, #7
 80006c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC1_Init+0xb4>)
 80006d6:	f000 ff99 	bl	800160c <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e0:	f000 fa52 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000344 	.word	0x20000344

080006f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_DAC_Init+0x4c>)
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <MX_DAC_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_DAC_Init+0x4c>)
 8000708:	f001 fbe2 	bl	8001ed0 <HAL_DAC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000712:	f000 fa39 	bl	8000b88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000716:	2324      	movs	r3, #36	; 0x24
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_DAC_Init+0x4c>)
 8000726:	f001 fc4b 	bl	8001fc0 <HAL_DAC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000730:	f000 fa2a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200003d8 	.word	0x200003d8
 8000740:	40007400 	.word	0x40007400

08000744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_TIM1_Init+0x9c>)
 8000764:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_TIM1_Init+0xa0>)
 8000766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM1_Init+0x9c>)
 800076a:	2247      	movs	r2, #71	; 0x47
 800076c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_TIM1_Init+0x9c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_TIM1_Init+0x9c>)
 8000776:	2231      	movs	r2, #49	; 0x31
 8000778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM1_Init+0x9c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_TIM1_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM1_Init+0x9c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_TIM1_Init+0x9c>)
 800078e:	f003 fb49 	bl	8003e24 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f9f6 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_TIM1_Init+0x9c>)
 80007aa:	f003 fd52 	bl	8004252 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007b4:	f000 f9e8 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM1_Init+0x9c>)
 80007ca:	f003 ff3b 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007d4:	f000 f9d8 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000430 	.word	0x20000430
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0x94>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0x94>)
 8000810:	2247      	movs	r2, #71	; 0x47
 8000812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM2_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0x94>)
 800081c:	2231      	movs	r2, #49	; 0x31
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_TIM2_Init+0x94>)
 800082e:	f003 faf9 	bl	8003e24 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000838:	f000 f9a6 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0x94>)
 800084a:	f003 fd02 	bl	8004252 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f998 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000858:	2320      	movs	r3, #32
 800085a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0x94>)
 8000866:	f003 feed 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f98a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000047c 	.word	0x2000047c

08000880 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_TIM15_Init+0x9c>)
 80008a0:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_TIM15_Init+0xa0>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM15_Init+0x9c>)
 80008a6:	2247      	movs	r2, #71	; 0x47
 80008a8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_TIM15_Init+0x9c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0xffff-1;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_TIM15_Init+0x9c>)
 80008b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM15_Init+0x9c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_TIM15_Init+0x9c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM15_Init+0x9c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_TIM15_Init+0x9c>)
 80008cc:	f003 faaa 	bl	8003e24 <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80008d6:	f000 f957 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_TIM15_Init+0x9c>)
 80008e8:	f003 fcb3 	bl	8004252 <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80008f2:	f000 f949 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_TIM15_Init+0x9c>)
 8000904:	f003 fe9e 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800090e:	f000 f93b 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200004c8 	.word	0x200004c8
 8000920:	40014000 	.word	0x40014000

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART1_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_USART1_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000930:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART1_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART1_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART1_UART_Init+0x58>)
 8000968:	f003 fef0 	bl	800474c <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f909 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000558 	.word	0x20000558
 8000980:	40013800 	.word	0x40013800

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_DMA_Init+0x58>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_DMA_Init+0x58>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_DMA_Init+0x58>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2105      	movs	r1, #5
 80009a6:	200b      	movs	r0, #11
 80009a8:	f001 fa68 	bl	8001e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ac:	200b      	movs	r0, #11
 80009ae:	f001 fa81 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	200d      	movs	r0, #13
 80009b8:	f001 fa60 	bl	8001e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009bc:	200d      	movs	r0, #13
 80009be:	f001 fa79 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	200f      	movs	r0, #15
 80009c8:	f001 fa58 	bl	8001e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f001 fa71 	bl	8001eb4 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 80009fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2160      	movs	r1, #96	; 0x60
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 fd91 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a6a:	f001 fd8b 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f001 fbf2 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000aa6:	f001 fbe3 	bl	8002270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400

08000abc <Task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1 */
void Task1(void const * argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  DHT11_Start();
 8000ac4:	f7ff fc5c 	bl	8000380 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8000ac8:	f7ff fc7b 	bl	80003c2 <DHT11_Check_Response>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <Task1+0x6c>)
 8000ad2:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read();
 8000ad4:	f7ff fca3 	bl	800041e <DHT11_Read>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <Task1+0x70>)
 8000ade:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read();
 8000ae0:	f7ff fc9d 	bl	800041e <DHT11_Read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <Task1+0x74>)
 8000aea:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read();
 8000aec:	f7ff fc97 	bl	800041e <DHT11_Read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <Task1+0x78>)
 8000af6:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read();
 8000af8:	f7ff fc91 	bl	800041e <DHT11_Read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <Task1+0x7c>)
 8000b02:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8000b04:	f7ff fc8b 	bl	800041e <DHT11_Read>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <Task1+0x80>)
 8000b0e:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <Task1+0x78>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <Task1+0x84>)
 8000b18:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <Task1+0x70>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <Task1+0x88>)
 8000b22:	801a      	strh	r2, [r3, #0]
	  DHT11_Start();
 8000b24:	e7ce      	b.n	8000ac4 <Task1+0x8>
 8000b26:	bf00      	nop
 8000b28:	200005f2 	.word	0x200005f2
 8000b2c:	200005e8 	.word	0x200005e8
 8000b30:	200005e9 	.word	0x200005e9
 8000b34:	200005ea 	.word	0x200005ea
 8000b38:	200005eb 	.word	0x200005eb
 8000b3c:	200005ec 	.word	0x200005ec
 8000b40:	200005f0 	.word	0x200005f0
 8000b44:	200005ee 	.word	0x200005ee

08000b48 <Task0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task0 */
void Task0(void const * argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task0 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b50:	2101      	movs	r1, #1
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f001 fcfd 	bl	8002554 <HAL_GPIO_ReadPin>
    osDelay(300);
 8000b5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b5e:	f004 fa83 	bl	8005068 <osDelay>
	  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b62:	e7f5      	b.n	8000b50 <Task0+0x8>

08000b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b76:	f000 fb11 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40001000 	.word	0x40001000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_MspInit+0x4c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210f      	movs	r1, #15
 8000bce:	f06f 0001 	mvn.w	r0, #1
 8000bd2:	f001 f953 	bl	8001e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c04:	d164      	bne.n	8000cd0 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_ADC_MspInit+0xf4>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c62:	f001 fb05 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f001 faf8 	bl	8002270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x100>)
 8000c84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000caa:	2220      	movs	r2, #32
 8000cac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cb6:	f001 f9d0 	bl	800205a <HAL_DMA_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000cc0:	f7ff ff62 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000394 	.word	0x20000394
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <HAL_DAC_MspInit+0xe0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d15a      	bne.n	8000dc0 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_DAC_MspInit+0xe4>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 fa8e 	bl	8002270 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_DAC_MspInit+0xec>)
 8000d58:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d5c:	2210      	movs	r2, #16
 8000d5e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d7e:	2220      	movs	r2, #32
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000d8a:	f001 f966 	bl	800205a <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000d94:	f7ff fef8 	bl	8000b88 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_DAC_MspInit+0xf0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_DAC_MspInit+0xf0>)
 8000d9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_DAC_MspInit+0xe8>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	210f      	movs	r1, #15
 8000db4:	2036      	movs	r0, #54	; 0x36
 8000db6:	f001 f861 	bl	8001e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f001 f87a 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40007400 	.word	0x40007400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	200003ec 	.word	0x200003ec
 8000dd4:	40020030 	.word	0x40020030
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <HAL_TIM_Base_MspInit+0xec>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d13c      	bne.n	8000e68 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a36      	ldr	r2, [pc, #216]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e08:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <HAL_TIM_Base_MspInit+0xf8>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e2c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e30:	2220      	movs	r2, #32
 8000e32:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e3c:	f001 f90d 	bl	800205a <HAL_DMA_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000e46:	f7ff fe9f 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e4e:	621a      	str	r2, [r3, #32]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_TIM_Base_MspInit+0xf4>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 15, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2018      	movs	r0, #24
 8000e5c:	f001 f80e 	bl	8001e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e60:	2018      	movs	r0, #24
 8000e62:	f001 f827 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e66:	e02a      	b.n	8000ebe <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e70:	d10c      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
}
 8000e8a:	e018      	b.n	8000ebe <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM15)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_TIM_Base_MspInit+0xfc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d113      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_TIM_Base_MspInit+0xf0>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	2018      	movs	r0, #24
 8000eb4:	f000 ffe2 	bl	8001e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000eb8:	2018      	movs	r0, #24
 8000eba:	f000 fffb 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	20000514 	.word	0x20000514
 8000ed4:	40020058 	.word	0x40020058
 8000ed8:	40014000 	.word	0x40014000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x7c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d127      	bne.n	8000f4e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f2e:	2330      	movs	r3, #48	; 0x30
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_UART_MspInit+0x84>)
 8000f4a:	f001 f991 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000800 	.word	0x48000800

08000f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <HAL_InitTick+0xe0>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_InitTick+0xe0>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	61d3      	str	r3, [r2, #28]
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_InitTick+0xe0>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f8c:	f107 0210 	add.w	r2, r7, #16
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fd80 	bl	8003a9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fa6:	f002 fd35 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8000faa:	6378      	str	r0, [r7, #52]	; 0x34
 8000fac:	e004      	b.n	8000fb8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fae:	f002 fd31 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_InitTick+0xe4>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	0c9b      	lsrs	r3, r3, #18
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_InitTick+0xe8>)
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <HAL_InitTick+0xec>)
 8000fca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_InitTick+0xe8>)
 8000fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_InitTick+0xe8>)
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_InitTick+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_InitTick+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_InitTick+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fec:	4817      	ldr	r0, [pc, #92]	; (800104c <HAL_InitTick+0xe8>)
 8000fee:	f002 ff19 	bl	8003e24 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11b      	bne.n	8001038 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <HAL_InitTick+0xe8>)
 8001002:	f002 ffb3 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 8001006:	4603      	mov	r3, r0
 8001008:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800100c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001010:	2b00      	cmp	r3, #0
 8001012:	d111      	bne.n	8001038 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001014:	2036      	movs	r0, #54	; 0x36
 8001016:	f000 ff4d 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d808      	bhi.n	8001032 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2036      	movs	r0, #54	; 0x36
 8001026:	f000 ff29 	bl	8001e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_InitTick+0xf0>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	e002      	b.n	8001038 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001038:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800103c:	4618      	mov	r0, r3
 800103e:	3738      	adds	r7, #56	; 0x38
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	431bde83 	.word	0x431bde83
 800104c:	200005f4 	.word	0x200005f4
 8001050:	40001000 	.word	0x40001000
 8001054:	20000004 	.word	0x20000004

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel1_IRQHandler+0x10>)
 800108a:	f001 f82d 	bl	80020e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000394 	.word	0x20000394

08001098 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Channel3_IRQHandler+0x10>)
 800109e:	f001 f823 	bl	80020e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003ec 	.word	0x200003ec

080010ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA1_Channel5_IRQHandler+0x10>)
 80010b2:	f001 f819 	bl	80020e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000514 	.word	0x20000514

080010c0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80010c6:	f002 ffa5 	bl	8004014 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80010cc:	f002 ffa2 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000430 	.word	0x20000430
 80010d8:	200004c8 	.word	0x200004c8

080010dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <TIM6_DAC_IRQHandler+0x14>)
 80010e2:	f002 ff97 	bl	8004014 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <TIM6_DAC_IRQHandler+0x18>)
 80010e8:	f000 ff39 	bl	8001f5e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200005f4 	.word	0x200005f4
 80010f4:	200003d8 	.word	0x200003d8

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff ffea 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f005 f98f 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff f9af 	bl	80004b0 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001154:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001160:	08006760 	.word	0x08006760
  ldr r2, =_sbss
 8001164:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001168:	20001398 	.word	0x20001398

0800116c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_IRQHandler>
	...

08001170 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fe70 	bl	8001e66 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f7ff feec 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fd02 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000640 	.word	0x20000640

080011c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000640 	.word	0x20000640

080011dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09a      	sub	sp, #104	; 0x68
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e169      	b.n	8001518 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d176      	bne.n	8001344 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d152      	bne.n	8001304 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fcb3 	bl	8000be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d13b      	bne.n	8001304 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fcd7 	bl	8001c40 <ADC_Disable>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12f      	bne.n	8001304 <HAL_ADC_Init+0xe0>
 80012a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12b      	bne.n	8001304 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	f043 0202 	orr.w	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e0:	4b8f      	ldr	r3, [pc, #572]	; (8001520 <HAL_ADC_Init+0x2fc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a8f      	ldr	r2, [pc, #572]	; (8001524 <HAL_ADC_Init+0x300>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9a      	lsrs	r2, r3, #18
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f6:	e002      	b.n	80012fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f9      	bne.n	80012f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001320:	d110      	bne.n	8001344 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f023 0312 	bic.w	r3, r3, #18
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 80d6 	bne.w	80014fe <HAL_ADC_Init+0x2da>
 8001352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80d1 	bne.w	80014fe <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80c9 	bne.w	80014fe <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001374:	f043 0202 	orr.w	r2, r3, #2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137c:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <HAL_ADC_Init+0x304>)
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_ADC_Init+0x180>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_Init+0x180>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_ADC_Init+0x182>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11c      	bne.n	80013e4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_Init+0x1a8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_Init+0x1a8>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_ADC_Init+0x1aa>
 80013cc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	431a      	orrs	r2, r3
 80013e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e5b      	ldrb	r3, [r3, #25]
 80013e8:	035b      	lsls	r3, r3, #13
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ee:	2a01      	cmp	r2, #1
 80013f0:	d002      	beq.n	80013f8 <HAL_ADC_Init+0x1d4>
 80013f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f6:	e000      	b.n	80013fa <HAL_ADC_Init+0x1d6>
 80013f8:	2200      	movs	r2, #0
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4313      	orrs	r3, r2
 8001408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140a:	4313      	orrs	r3, r2
 800140c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d11b      	bne.n	8001450 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e5b      	ldrb	r3, [r3, #25]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	3b01      	subs	r3, #1
 8001426:	045a      	lsls	r2, r3, #17
 8001428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142a:	4313      	orrs	r3, r2
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
 8001432:	e00d      	b.n	8001450 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	4313      	orrs	r3, r2
 8001462:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001464:	4313      	orrs	r3, r2
 8001466:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b00      	cmp	r3, #0
 8001474:	d114      	bne.n	80014a0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e1b      	ldrb	r3, [r3, #24]
 800148e:	039a      	lsls	r2, r3, #14
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4313      	orrs	r3, r2
 800149a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149c:	4313      	orrs	r3, r2
 800149e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_ADC_Init+0x308>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014b0:	430b      	orrs	r3, r1
 80014b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10c      	bne.n	80014d6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f023 010f 	bic.w	r1, r3, #15
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
 80014d4:	e007      	b.n	80014e6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 020f 	bic.w	r2, r2, #15
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f023 0303 	bic.w	r3, r3, #3
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
 80014fc:	e00a      	b.n	8001514 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f023 0312 	bic.w	r3, r3, #18
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001518:	4618      	mov	r0, r3
 800151a:	3768      	adds	r7, #104	; 0x68
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	50000300 	.word	0x50000300
 800152c:	fff0c007 	.word	0xfff0c007

08001530 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d158      	bne.n	80015fc <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_Start+0x28>
 8001554:	2302      	movs	r3, #2
 8001556:	e054      	b.n	8001602 <HAL_ADC_Start+0xd2>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb09 	bl	8001b78 <ADC_Enable>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d140      	bne.n	80015f2 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ba:	d106      	bne.n	80015ca <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	f023 0206 	bic.w	r2, r3, #6
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	221c      	movs	r2, #28
 80015de:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0204 	orr.w	r2, r2, #4
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	e006      	b.n	8001600 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
 80015fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800160c:	b480      	push	{r7}
 800160e:	b09b      	sub	sp, #108	; 0x6c
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADC_ConfigChannel+0x22>
 800162a:	2302      	movs	r3, #2
 800162c:	e299      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x556>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 827d 	bne.w	8001b40 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d81c      	bhi.n	8001688 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	461a      	mov	r2, r3
 8001662:	231f      	movs	r3, #31
 8001664:	4093      	lsls	r3, r2
 8001666:	43db      	mvns	r3, r3
 8001668:	4019      	ands	r1, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa00 f203 	lsl.w	r2, r0, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
 8001686:	e063      	b.n	8001750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d81e      	bhi.n	80016ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	3b1e      	subs	r3, #30
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4019      	ands	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	3b1e      	subs	r3, #30
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
 80016cc:	e040      	b.n	8001750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b0e      	cmp	r3, #14
 80016d4:	d81e      	bhi.n	8001714 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	3b3c      	subs	r3, #60	; 0x3c
 80016ea:	221f      	movs	r2, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	3b3c      	subs	r3, #60	; 0x3c
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
 8001712:	e01d      	b.n	8001750 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	3b5a      	subs	r3, #90	; 0x5a
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	3b5a      	subs	r3, #90	; 0x5a
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80e5 	bne.w	800192a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b09      	cmp	r3, #9
 8001766:	d91c      	bls.n	80017a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6999      	ldr	r1, [r3, #24]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	3b1e      	subs	r3, #30
 800177a:	2207      	movs	r2, #7
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	4019      	ands	r1, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	3b1e      	subs	r3, #30
 8001794:	fa00 f203 	lsl.w	r2, r0, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	e019      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6959      	ldr	r1, [r3, #20]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	2207      	movs	r2, #7
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4019      	ands	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6898      	ldr	r0, [r3, #8]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d84f      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0x28c>
 80017f8:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_ADC_ConfigChannel+0x1f4>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001811 	.word	0x08001811
 8001804:	08001833 	.word	0x08001833
 8001808:	08001855 	.word	0x08001855
 800180c:	08001877 	.word	0x08001877
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001816:	4b99      	ldr	r3, [pc, #612]	; (8001a7c <HAL_ADC_ConfigChannel+0x470>)
 8001818:	4013      	ands	r3, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	0691      	lsls	r1, r2, #26
 8001820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001822:	430a      	orrs	r2, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800182e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001830:	e07e      	b.n	8001930 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <HAL_ADC_ConfigChannel+0x470>)
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	0691      	lsls	r1, r2, #26
 8001842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001844:	430a      	orrs	r2, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001850:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001852:	e06d      	b.n	8001930 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_ADC_ConfigChannel+0x470>)
 800185c:	4013      	ands	r3, r2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	0691      	lsls	r1, r2, #26
 8001864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001866:	430a      	orrs	r2, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001872:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001874:	e05c      	b.n	8001930 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800187c:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_ADC_ConfigChannel+0x470>)
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	0691      	lsls	r1, r2, #26
 8001886:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001888:	430a      	orrs	r2, r1
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001894:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001896:	e04b      	b.n	8001930 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	069b      	lsls	r3, r3, #26
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	069b      	lsls	r3, r3, #26
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	069b      	lsls	r3, r3, #26
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001902:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800190a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	069b      	lsls	r3, r3, #26
 8001914:	429a      	cmp	r2, r3
 8001916:	d10a      	bne.n	800192e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001926:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001928:	e001      	b.n	800192e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800192a:	bf00      	nop
 800192c:	e000      	b.n	8001930 <HAL_ADC_ConfigChannel+0x324>
      break;
 800192e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x344>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x344>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_ADC_ConfigChannel+0x346>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80ff 	bne.w	8001b56 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d00f      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800197e:	e049      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	409a      	lsls	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d91c      	bls.n	80019dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6999      	ldr	r1, [r3, #24]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	3b1b      	subs	r3, #27
 80019b4:	2207      	movs	r2, #7
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4019      	ands	r1, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6898      	ldr	r0, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	3b1b      	subs	r3, #27
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	619a      	str	r2, [r3, #24]
 80019da:	e01b      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6959      	ldr	r1, [r3, #20]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_ADC_ConfigChannel+0x474>)
 8001a16:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d014      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a30:	2b11      	cmp	r3, #17
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	f040 8086 	bne.w	8001b56 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d17f      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10d      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x478>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d106      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x478>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e005      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x47a>
 8001a7a:	bf00      	nop
 8001a7c:	83fff000 	.word	0x83fff000
 8001a80:	50000300 	.word	0x50000300
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d150      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x4a0>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x4a0>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_ConfigChannel+0x4a2>
 8001aac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d13c      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d11d      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x4ea>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac2:	d118      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ace:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_ADC_ConfigChannel+0x564>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_ADC_ConfigChannel+0x568>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9a      	lsrs	r2, r3, #18
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af4:	e02e      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b11      	cmp	r3, #17
 8001afc:	d10b      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x50a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b14:	e01e      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d11a      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2a:	e013      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b3e:	e00a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b52:	e000      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b54:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	376c      	adds	r7, #108	; 0x6c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d108      	bne.n	8001ba4 <ADC_Enable+0x2c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <ADC_Enable+0x2c>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <ADC_Enable+0x2e>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d143      	bne.n	8001c32 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <ADC_Enable+0xc4>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e02f      	b.n	8001c34 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001be4:	f7ff faee 	bl	80011c4 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bea:	e01b      	b.n	8001c24 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bec:	f7ff faea 	bl	80011c4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d914      	bls.n	8001c24 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d00d      	beq.n	8001c24 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e007      	b.n	8001c34 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d1dc      	bne.n	8001bec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	8000003f 	.word	0x8000003f

08001c40 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <ADC_Disable+0x2c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <ADC_Disable+0x2c>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <ADC_Disable+0x2e>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d047      	beq.n	8001d02 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030d 	and.w	r3, r3, #13
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10f      	bne.n	8001ca0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0202 	orr.w	r2, r2, #2
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2203      	movs	r2, #3
 8001c96:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c98:	f7ff fa94 	bl	80011c4 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c9e:	e029      	b.n	8001cf4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e023      	b.n	8001d04 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cbc:	f7ff fa82 	bl	80011c4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d914      	bls.n	8001cf4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10d      	bne.n	8001cf4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0210 	orr.w	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e007      	b.n	8001d04 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d0dc      	beq.n	8001cbc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff4c 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8e:	f7ff ff61 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f7ff ffb1 	bl	8001e00 <NVIC_EncodePriority>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff80 	bl	8001dac <__NVIC_SetPriority>
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff54 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e014      	b.n	8001f0c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fef8 	bl	8000ce8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f74:	d120      	bne.n	8001fb8 <HAL_DAC_IRQHandler+0x5a>
  {  
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f84:	d118      	bne.n	8001fb8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fb0:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffc9 	bl	8001f4a <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	795b      	ldrb	r3, [r3, #5]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_DAC_ConfigChannel+0x20>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e036      	b.n	800204e <HAL_DAC_ConfigChannel+0x8e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ff4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	22c0      	movs	r2, #192	; 0xc0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e037      	b.n	80020e0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002086:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800208a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8b4 	bl	8002230 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}  
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2204      	movs	r2, #4
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d024      	beq.n	800215a <HAL_DMA_IRQHandler+0x72>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	2104      	movs	r1, #4
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06a      	beq.n	8002226 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002158:	e065      	b.n	8002226 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2202      	movs	r2, #2
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xdc>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020a 	bic.w	r2, r2, #10
 8002190:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2102      	movs	r1, #2
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d035      	beq.n	8002226 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80021c2:	e030      	b.n	8002226 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2208      	movs	r2, #8
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d028      	beq.n	8002226 <HAL_DMA_IRQHandler+0x13e>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d023      	beq.n	8002226 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 020e 	bic.w	r2, r2, #14
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
    }
  }
}  
 8002224:	e7ff      	b.n	8002226 <HAL_DMA_IRQHandler+0x13e>
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <DMA_CalcBaseAndBitshift+0x34>)
 8002240:	4413      	add	r3, r2
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <DMA_CalcBaseAndBitshift+0x38>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <DMA_CalcBaseAndBitshift+0x3c>)
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	bffdfff8 	.word	0xbffdfff8
 8002268:	cccccccd 	.word	0xcccccccd
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	e14e      	b.n	800251e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8140 	beq.w	8002518 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x40>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e6:	2201      	movs	r2, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b03      	cmp	r3, #3
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 809a 	beq.w	8002518 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e4:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_GPIO_Init+0x2cc>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a54      	ldr	r2, [pc, #336]	; (800253c <HAL_GPIO_Init+0x2cc>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b52      	ldr	r3, [pc, #328]	; (800253c <HAL_GPIO_Init+0x2cc>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002426:	d013      	beq.n	8002450 <HAL_GPIO_Init+0x1e0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_GPIO_Init+0x2d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00d      	beq.n	800244c <HAL_GPIO_Init+0x1dc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_GPIO_Init+0x2d8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <HAL_GPIO_Init+0x1d8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_GPIO_Init+0x2dc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_GPIO_Init+0x1d4>
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_GPIO_Init+0x1e2>
 8002444:	2305      	movs	r3, #5
 8002446:	e004      	b.n	8002452 <HAL_GPIO_Init+0x1e2>
 8002448:	2302      	movs	r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x1e2>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_GPIO_Init+0x1e2>
 8002450:	2300      	movs	r3, #0
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4093      	lsls	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002462:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024be:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x2e0>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f47f aea9 	bne.w	8002280 <HAL_GPIO_Init+0x10>
  }
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	48000400 	.word	0x48000400
 8002548:	48000800 	.word	0x48000800
 800254c:	48000c00 	.word	0x48000c00
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f001 b823 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 817d 	beq.w	80028ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025f0:	4bbc      	ldr	r3, [pc, #752]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00c      	beq.n	8002616 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025fc:	4bb9      	ldr	r3, [pc, #740]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d15c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x10e>
 8002608:	4bb6      	ldr	r3, [pc, #728]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d155      	bne.n	80026c2 <HAL_RCC_OscConfig+0x10e>
 8002616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800262a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_RCC_OscConfig+0x94>
 8002642:	4ba8      	ldr	r3, [pc, #672]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e015      	b.n	8002674 <HAL_RCC_OscConfig+0xc0>
 8002648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800265c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002660:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002664:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002670:	4b9c      	ldr	r3, [pc, #624]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002678:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800267c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002688:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 811f 	beq.w	80028e8 <HAL_RCC_OscConfig+0x334>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 8116 	bne.w	80028e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f000 bfaf 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12e>
 80026d4:	4b83      	ldr	r3, [pc, #524]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a82      	ldr	r2, [pc, #520]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e036      	b.n	8002750 <HAL_RCC_OscConfig+0x19c>
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x158>
 80026f2:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e021      	b.n	8002750 <HAL_RCC_OscConfig+0x19c>
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x184>
 800271e:	4b71      	ldr	r3, [pc, #452]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a70      	ldr	r2, [pc, #448]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0x19c>
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a66      	ldr	r2, [pc, #408]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f023 020f 	bic.w	r2, r3, #15
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	495f      	ldr	r1, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 8002766:	4313      	orrs	r3, r2
 8002768:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d059      	beq.n	800282e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fd23 	bl	80011c4 <HAL_GetTick>
 800277e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fd1e 	bl	80011c4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d902      	bls.n	800279a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f000 bf43 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 800279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80027ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0x218>
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x244>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002800:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800280c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ab      	beq.n	8002784 <HAL_RCC_OscConfig+0x1d0>
 800282c:	e05d      	b.n	80028ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fcc9 	bl	80011c4 <HAL_GetTick>
 8002832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fcc4 	bl	80011c4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d902      	bls.n	800284e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	f000 bee9 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 800284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002852:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002862:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x2cc>
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e015      	b.n	80028ac <HAL_RCC_OscConfig+0x2f8>
 8002880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002884:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800289c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_RCC_OscConfig+0x330>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80028b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80028c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f042 0220 	orr.w	r2, r2, #32
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ab      	bne.n	8002838 <HAL_RCC_OscConfig+0x284>
 80028e0:	e003      	b.n	80028ea <HAL_RCC_OscConfig+0x336>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 817d 	beq.w	8002bfa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002900:	4ba6      	ldr	r3, [pc, #664]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800290c:	4ba3      	ldr	r3, [pc, #652]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d172      	bne.n	80029fe <HAL_RCC_OscConfig+0x44a>
 8002918:	4ba0      	ldr	r3, [pc, #640]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d16c      	bne.n	80029fe <HAL_RCC_OscConfig+0x44a>
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002936:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_RCC_OscConfig+0x3a0>
 800294e:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	e013      	b.n	800297c <HAL_RCC_OscConfig+0x3c8>
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800296c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	2202      	movs	r2, #2
 800297e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002982:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800298e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f042 0220 	orr.w	r2, r2, #32
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f002 021f 	and.w	r2, r2, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCC_OscConfig+0x410>
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f000 be2e 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	21f8      	movs	r1, #248	; 0xf8
 80029da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029e2:	fa91 f1a1 	rbit	r1, r1
 80029e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029ee:	fab1 f181 	clz	r1, r1
 80029f2:	b2c9      	uxtb	r1, r1
 80029f4:	408b      	lsls	r3, r1
 80029f6:	4969      	ldr	r1, [pc, #420]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fc:	e0fd      	b.n	8002bfa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8088 	beq.w	8002b20 <HAL_RCC_OscConfig+0x56c>
 8002a10:	2301      	movs	r3, #1
 8002a12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	461a      	mov	r2, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fbc2 	bl	80011c4 <HAL_GetTick>
 8002a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fbbd 	bl	80011c4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d902      	bls.n	8002a5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	f000 bde2 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4d8>
 8002a86:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCC_OscConfig+0x500>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002aa4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002aba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002abe:	fa92 f2a2 	rbit	r2, r2
 8002ac2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ac6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f042 0220 	orr.w	r2, r2, #32
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f002 021f 	and.w	r2, r2, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0af      	beq.n	8002a46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	21f8      	movs	r1, #248	; 0xf8
 8002afc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b04:	fa91 f1a1 	rbit	r1, r1
 8002b08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b10:	fab1 f181 	clz	r1, r1
 8002b14:	b2c9      	uxtb	r1, r1
 8002b16:	408b      	lsls	r3, r1
 8002b18:	4920      	ldr	r1, [pc, #128]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
 8002b1e:	e06c      	b.n	8002bfa <HAL_RCC_OscConfig+0x646>
 8002b20:	2301      	movs	r3, #1
 8002b22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fb3a 	bl	80011c4 <HAL_GetTick>
 8002b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe fb35 	bl	80011c4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	f000 bd5a 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d104      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5ec>
 8002b96:	4b01      	ldr	r3, [pc, #4]	; (8002b9c <HAL_RCC_OscConfig+0x5e8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e015      	b.n	8002bc8 <HAL_RCC_OscConfig+0x614>
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bc4:	4bc8      	ldr	r3, [pc, #800]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002bce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 8002bd6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bda:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ad      	bne.n	8002b56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8110 	beq.w	8002e30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d079      	beq.n	8002d14 <HAL_RCC_OscConfig+0x760>
 8002c20:	2301      	movs	r3, #1
 8002c22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4bab      	ldr	r3, [pc, #684]	; (8002eec <HAL_RCC_OscConfig+0x938>)
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	2301      	movs	r3, #1
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fabb 	bl	80011c4 <HAL_GetTick>
 8002c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe fab6 	bl	80011c4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d902      	bls.n	8002c6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	f000 bcdb 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c84:	2202      	movs	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ca8:	2202      	movs	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	6019      	str	r1, [r3, #0]
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f1a3 	rbit	r1, r3
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cea:	6019      	str	r1, [r3, #0]
  return result;
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0a0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x6a0>
 8002d12:	e08d      	b.n	8002e30 <HAL_RCC_OscConfig+0x87c>
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d36:	601a      	str	r2, [r3, #0]
  return result;
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x938>)
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	2300      	movs	r3, #0
 8002d54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fa35 	bl	80011c4 <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe fa30 	bl	80011c4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d902      	bls.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f000 bc55 	b.w	8003620 <HAL_RCC_OscConfig+0x106c>
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d7e:	2202      	movs	r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002da2:	2202      	movs	r2, #2
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002de0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dee:	2102      	movs	r1, #2
 8002df0:	6019      	str	r1, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f1a3 	rbit	r1, r3
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e08:	6019      	str	r1, [r3, #0]
  return result;
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d197      	bne.n	8002d60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 81a1 	beq.w	8003188 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	61d3      	str	r3, [r2, #28]
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_RCC_OscConfig+0x93c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_RCC_OscConfig+0x93c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_RCC_OscConfig+0x93c>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f991 	bl	80011c4 <HAL_GetTick>
 8002ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e009      	b.n	8002ebc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe f98c 	bl	80011c4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	; 0x64
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e3b1      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_RCC_OscConfig+0x93c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x940>
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a02      	ldr	r2, [pc, #8]	; (8002ee8 <HAL_RCC_OscConfig+0x934>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	e03c      	b.n	8002f60 <HAL_RCC_OscConfig+0x9ac>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	10908120 	.word	0x10908120
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x96a>
 8002f04:	4bc1      	ldr	r3, [pc, #772]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4ac0      	ldr	r2, [pc, #768]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	4bbe      	ldr	r3, [pc, #760]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4abd      	ldr	r2, [pc, #756]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e020      	b.n	8002f60 <HAL_RCC_OscConfig+0x9ac>
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x994>
 8002f2e:	4bb7      	ldr	r3, [pc, #732]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4ab6      	ldr	r2, [pc, #728]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	4bb4      	ldr	r3, [pc, #720]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4ab3      	ldr	r2, [pc, #716]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0x9ac>
 8002f48:	4bb0      	ldr	r3, [pc, #704]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4aaf      	ldr	r2, [pc, #700]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	4bad      	ldr	r3, [pc, #692]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4aac      	ldr	r2, [pc, #688]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002f5a:	f023 0304 	bic.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8081 	beq.w	8003074 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe f927 	bl	80011c4 <HAL_GetTick>
 8002f76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe f922 	bl	80011c4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e345      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fda:	601a      	str	r2, [r3, #0]
  return result;
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fe4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0xa4c>
 8002ffa:	4b84      	ldr	r3, [pc, #528]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0xa74>
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003008:	2202      	movs	r2, #2
 800300a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003030:	2102      	movs	r1, #2
 8003032:	6011      	str	r1, [r2, #0]
 8003034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003038:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	fa92 f1a2 	rbit	r1, r2
 8003042:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003046:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800304a:	6011      	str	r1, [r2, #0]
  return result;
 800304c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003050:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d084      	beq.n	8002f7c <HAL_RCC_OscConfig+0x9c8>
 8003072:	e07f      	b.n	8003174 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fe f8a6 	bl	80011c4 <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe f8a1 	bl	80011c4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2c4      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800309e:	2202      	movs	r2, #2
 80030a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030c2:	2202      	movs	r2, #2
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030dc:	601a      	str	r2, [r3, #0]
  return result;
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0xb4e>
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	e013      	b.n	800312a <HAL_RCC_OscConfig+0xb76>
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800310a:	2202      	movs	r2, #2
 800310c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003132:	2102      	movs	r1, #2
 8003134:	6011      	str	r1, [r2, #0]
 8003136:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	fa92 f1a2 	rbit	r1, r2
 8003144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003148:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800314c:	6011      	str	r1, [r2, #0]
  return result;
 800314e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003152:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	fab2 f282 	clz	r2, r2
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d184      	bne.n	800307e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003174:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8242 	beq.w	800361e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <HAL_RCC_OscConfig+0xc58>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	f000 8213 	beq.w	80035ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f040 8162 	bne.w	800347e <HAL_RCC_OscConfig+0xeca>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd ffe0 	bl	80011c4 <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e00c      	b.n	8003224 <HAL_RCC_OscConfig+0xc70>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd ffd8 	bl	80011c4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1fd      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800322c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003248:	601a      	str	r2, [r3, #0]
  return result;
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003252:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_RCC_OscConfig+0xcba>
 8003268:	4bb0      	ldr	r3, [pc, #704]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	e027      	b.n	80032be <HAL_RCC_OscConfig+0xd0a>
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800329c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4b9c      	ldr	r3, [pc, #624]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032ca:	6011      	str	r1, [r2, #0]
 80032cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	fa92 f1a2 	rbit	r1, r2
 80032da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032e2:	6011      	str	r1, [r2, #0]
  return result;
 80032e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d182      	bne.n	8003210 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330a:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	430b      	orrs	r3, r1
 800332c:	497f      	ldr	r1, [pc, #508]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800333a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003356:	601a      	str	r2, [r3, #0]
  return result;
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003360:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800336c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	2301      	movs	r3, #1
 8003376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd ff24 	bl	80011c4 <HAL_GetTick>
 800337c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003380:	e009      	b.n	8003396 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd ff1f 	bl	80011c4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e144      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800339e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033ba:	601a      	str	r2, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_OscConfig+0xe2c>
 80033da:	4b54      	ldr	r3, [pc, #336]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	e027      	b.n	8003430 <HAL_RCC_OscConfig+0xe7c>
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	fa93 f2a3 	rbit	r2, r3
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800340e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003434:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003442:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fa92 f1a2 	rbit	r1, r2
 800344c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003450:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003454:	6011      	str	r1, [r2, #0]
  return result;
 8003456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800345a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	fab2 f282 	clz	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f042 0220 	orr.w	r2, r2, #32
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f002 021f 	and.w	r2, r2, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f202 	lsl.w	r2, r1, r2
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d082      	beq.n	8003382 <HAL_RCC_OscConfig+0xdce>
 800347c:	e0cf      	b.n	800361e <HAL_RCC_OscConfig+0x106a>
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034a2:	601a      	str	r2, [r3, #0]
  return result;
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2300      	movs	r3, #0
 80034c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fe7e 	bl	80011c4 <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fd fe79 	bl	80011c4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e09e      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003506:	601a      	str	r2, [r3, #0]
  return result;
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003510:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d104      	bne.n	8003530 <HAL_RCC_OscConfig+0xf7c>
 8003526:	4b01      	ldr	r3, [pc, #4]	; (800352c <HAL_RCC_OscConfig+0xf78>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e029      	b.n	8003580 <HAL_RCC_OscConfig+0xfcc>
 800352c:	40021000 	.word	0x40021000
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800355e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	fa93 f2a3 	rbit	r2, r3
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_OscConfig+0x1078>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003584:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003592:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	fa92 f1a2 	rbit	r1, r2
 800359c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035a4:	6011      	str	r1, [r2, #0]
  return result;
 80035a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d180      	bne.n	80034ce <HAL_RCC_OscConfig+0xf1a>
 80035cc:	e027      	b.n	800361e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e01e      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_OscConfig+0x1078>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d10b      	bne.n	800361a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003602:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b09e      	sub	sp, #120	; 0x78
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e162      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b90      	ldr	r3, [pc, #576]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b8d      	ldr	r3, [pc, #564]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	498b      	ldr	r1, [pc, #556]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e14a      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b82      	ldr	r3, [pc, #520]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	497f      	ldr	r1, [pc, #508]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80dc 	beq.w	800385c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d13c      	bne.n	8003726 <HAL_RCC_ClockConfig+0xf6>
 80036ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xa6>
 80036d0:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	e00f      	b.n	80036f6 <HAL_RCC_ClockConfig+0xc6>
 80036d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	667b      	str	r3, [r7, #100]	; 0x64
 80036e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e8:	663b      	str	r3, [r7, #96]	; 0x60
 80036ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80036fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036fe:	fa92 f2a2 	rbit	r2, r2
 8003702:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003704:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003706:	fab2 f282 	clz	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f002 021f 	and.w	r2, r2, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d17b      	bne.n	800381a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0f3      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d13c      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x178>
 800372e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003732:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d102      	bne.n	8003758 <HAL_RCC_ClockConfig+0x128>
 8003752:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e00f      	b.n	8003778 <HAL_RCC_ClockConfig+0x148>
 8003758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	63ba      	str	r2, [r7, #56]	; 0x38
 800377e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d13a      	bne.n	800381a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b2      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
 80037a8:	2302      	movs	r3, #2
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1a0>
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e00d      	b.n	80037ec <HAL_RCC_ClockConfig+0x1bc>
 80037d0:	2302      	movs	r3, #2
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	2302      	movs	r3, #2
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	4b29      	ldr	r3, [pc, #164]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	61ba      	str	r2, [r7, #24]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	617a      	str	r2, [r7, #20]
  return result;
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	fab2 f282 	clz	r2, r2
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f042 0220 	orr.w	r2, r2, #32
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f002 021f 	and.w	r2, r2, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e079      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	491a      	ldr	r1, [pc, #104]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800382c:	f7fd fcca 	bl	80011c4 <HAL_GetTick>
 8003830:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e00a      	b.n	800384a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fd fcc6 	bl	80011c4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e061      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_RCC_ClockConfig+0x260>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 020c 	and.w	r2, r3, #12
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	429a      	cmp	r2, r3
 800385a:	d1eb      	bne.n	8003834 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d214      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4906      	ldr	r1, [pc, #24]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCC_ClockConfig+0x25c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e040      	b.n	800390e <HAL_RCC_ClockConfig+0x2de>
 800388c:	40022000 	.word	0x40022000
 8003890:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_ClockConfig+0x2e8>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	491a      	ldr	r1, [pc, #104]	; (8003918 <HAL_RCC_ClockConfig+0x2e8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_RCC_ClockConfig+0x2e8>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4912      	ldr	r1, [pc, #72]	; (8003918 <HAL_RCC_ClockConfig+0x2e8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038d2:	f000 f829 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038d6:	4601      	mov	r1, r0
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCC_ClockConfig+0x2e8>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e0:	22f0      	movs	r2, #240	; 0xf0
 80038e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	fa92 f2a2 	rbit	r2, r2
 80038ea:	60fa      	str	r2, [r7, #12]
  return result;
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	fab2 f282 	clz	r2, r2
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	40d3      	lsrs	r3, r2
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x2ec>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	fa21 f303 	lsr.w	r3, r1, r3
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_RCC_ClockConfig+0x2f0>)
 8003900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_ClockConfig+0x2f4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fb2c 	bl	8000f64 <HAL_InitTick>
  
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3778      	adds	r7, #120	; 0x78
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	080066c0 	.word	0x080066c0
 8003920:	20000000 	.word	0x20000000
 8003924:	20000004 	.word	0x20000004

08003928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b08b      	sub	sp, #44	; 0x2c
 800392c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x30>
 8003952:	2b08      	cmp	r3, #8
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x36>
 8003956:	e03c      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003958:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800395a:	623b      	str	r3, [r7, #32]
      break;
 800395c:	e03c      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003964:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003968:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	607a      	str	r2, [r7, #4]
  return result;
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	40d3      	lsrs	r3, r2
 800397c:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	220f      	movs	r2, #15
 800398c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	fa92 f2a2 	rbit	r2, r2
 8003994:	60fa      	str	r2, [r7, #12]
  return result;
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	fab2 f282 	clz	r2, r2
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	40d3      	lsrs	r3, r2
 80039a0:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039b0:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e004      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	623b      	str	r3, [r7, #32]
      break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80039d4:	623b      	str	r3, [r7, #32]
      break;
 80039d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d8:	6a3b      	ldr	r3, [r7, #32]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	372c      	adds	r7, #44	; 0x2c
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	080066d8 	.word	0x080066d8
 80039f4:	080066e8 	.word	0x080066e8
 80039f8:	003d0900 	.word	0x003d0900

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a1a:	f7ff ffef 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1e:	4601      	mov	r1, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	fa92 f2a2 	rbit	r2, r2
 8003a34:	603a      	str	r2, [r7, #0]
  return result;
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	40d3      	lsrs	r3, r2
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a42:	5cd3      	ldrb	r3, [r2, r3]
 8003a44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	080066d0 	.word	0x080066d0

08003a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a5e:	f7ff ffcd 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a62:	4601      	mov	r1, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	fa92 f2a2 	rbit	r2, r2
 8003a78:	603a      	str	r2, [r7, #0]
  return result;
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	40d3      	lsrs	r3, r2
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	080066d0 	.word	0x080066d0

08003a9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCC_GetClockConfig+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b092      	sub	sp, #72	; 0x48
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80d4 	beq.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b24:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10e      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	61d3      	str	r3, [r2, #28]
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fd fb2d 	bl	80011c4 <HAL_GetTick>
 8003b6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fd fb29 	bl	80011c4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e14b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b8c:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8084 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d07c      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04b      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fad9 	bl	80011c4 <HAL_GetTick>
 8003c12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fd fad5 	bl	80011c4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0f5      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	2302      	movs	r3, #2
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	61fb      	str	r3, [r7, #28]
  return result;
 8003c44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d108      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c5a:	4b01      	ldr	r3, [pc, #4]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	e00d      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	10908100 	.word	0x10908100
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	613a      	str	r2, [r7, #16]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	60fa      	str	r2, [r7, #12]
  return result;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0b7      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ca6:	4b5e      	ldr	r3, [pc, #376]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	495b      	ldr	r1, [pc, #364]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4a56      	ldr	r2, [pc, #344]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd8:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494e      	ldr	r1, [pc, #312]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f023 0210 	bic.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4947      	ldr	r1, [pc, #284]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	493f      	ldr	r1, [pc, #252]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f023 0220 	bic.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4938      	ldr	r1, [pc, #224]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d50:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4930      	ldr	r1, [pc, #192]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d6e:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4929      	ldr	r1, [pc, #164]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4921      	ldr	r1, [pc, #132]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	491a      	ldr	r1, [pc, #104]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dc8:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	4912      	ldr	r1, [pc, #72]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	490b      	ldr	r1, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	4903      	ldr	r1, [pc, #12]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3748      	adds	r7, #72	; 0x48
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e049      	b.n	8003eca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc ffc6 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f000 fae6 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e033      	b.n	8003f54 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_TIM_Base_Start+0x8c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_Base_Start+0x3e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_Base_Start+0x3e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <HAL_TIM_Base_Start+0x90>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d115      	bne.n	8003f3e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_TIM_Base_Start+0x94>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d015      	beq.n	8003f50 <HAL_TIM_Base_Start+0x7c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	e008      	b.n	8003f50 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e03b      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_TIM_Base_Start_IT+0x4e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d004      	beq.n	8003fba <HAL_TIM_Base_Start_IT+0x4e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d115      	bne.n	8003fe6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_TIM_Base_Start_IT+0xa4>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d015      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d011      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	e008      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40014000 	.word	0x40014000
 8004010:	00010007 	.word	0x00010007

08004014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0202 	mvn.w	r2, #2
 8004040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9ce 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9c0 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9d1 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0204 	mvn.w	r2, #4
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9a4 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f996 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9a7 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0208 	mvn.w	r2, #8
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f97a 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f96c 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f97d 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2208      	movs	r2, #8
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f950 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f942 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f953 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fce6 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fab0 	bl	8004724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d10e      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 faa3 	bl	8004738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f901 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b20      	cmp	r3, #32
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0220 	mvn.w	r2, #32
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa63 	bl	8004710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_TIM_ConfigClockSource+0x1c>
 800426a:	2302      	movs	r3, #2
 800426c:	e0b6      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x18a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004290:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004298:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d03e      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xd8>
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	f200 8087 	bhi.w	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	f000 8086 	beq.w	80043c8 <HAL_TIM_ConfigClockSource+0x176>
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d87f      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042c2:	2b70      	cmp	r3, #112	; 0x70
 80042c4:	d01a      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xaa>
 80042c6:	2b70      	cmp	r3, #112	; 0x70
 80042c8:	d87b      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042ca:	2b60      	cmp	r3, #96	; 0x60
 80042cc:	d050      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0x11e>
 80042ce:	2b60      	cmp	r3, #96	; 0x60
 80042d0:	d877      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042d2:	2b50      	cmp	r3, #80	; 0x50
 80042d4:	d03c      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0xfe>
 80042d6:	2b50      	cmp	r3, #80	; 0x50
 80042d8:	d873      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d058      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x13e>
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d86f      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042e2:	2b30      	cmp	r3, #48	; 0x30
 80042e4:	d064      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x15e>
 80042e6:	2b30      	cmp	r3, #48	; 0x30
 80042e8:	d86b      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d060      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x15e>
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d867      	bhi.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d05c      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x15e>
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d05a      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x15e>
 80042fa:	e062      	b.n	80043c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f000 f97a 	bl	8004604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800431e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
      break;
 8004328:	e04f      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f000 f963 	bl	8004604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434c:	609a      	str	r2, [r3, #8]
      break;
 800434e:	e03c      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	f000 f8d7 	bl	8004510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2150      	movs	r1, #80	; 0x50
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f930 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 800436e:	e02c      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f8f6 	bl	800456e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2160      	movs	r1, #96	; 0x60
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f920 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 800438e:	e01c      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f8b7 	bl	8004510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f910 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 80043ae:	e00c      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 f907 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 80043c0:	e003      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      break;
 80043c6:	e000      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <TIM_Base_SetConfig+0xcc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x20>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a25      	ldr	r2, [pc, #148]	; (8004500 <TIM_Base_SetConfig+0xcc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_Base_SetConfig+0x5a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d00b      	beq.n	800448e <TIM_Base_SetConfig+0x5a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <TIM_Base_SetConfig+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_Base_SetConfig+0x5a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a21      	ldr	r2, [pc, #132]	; (8004508 <TIM_Base_SetConfig+0xd4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_Base_SetConfig+0x5a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <TIM_Base_SetConfig+0xd8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <TIM_Base_SetConfig+0xcc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_Base_SetConfig+0xb0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <TIM_Base_SetConfig+0xd0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_Base_SetConfig+0xb0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <TIM_Base_SetConfig+0xd4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <TIM_Base_SetConfig+0xd8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0201 	bic.w	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 030a 	bic.w	r3, r3, #10
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0210 	bic.w	r2, r3, #16
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	031b      	lsls	r3, r3, #12
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f043 0307 	orr.w	r3, r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800461e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	021a      	lsls	r2, r3, #8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	431a      	orrs	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e04f      	b.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800468c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	d004      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a10      	ldr	r2, [pc, #64]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10c      	bne.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e040      	b.n	80047e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fbb4 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	; 0x24
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8b6 	bl	80048fc <UART_SetConfig>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e022      	b.n	80047e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9e0 	bl	8004b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa67 	bl	8004cac <UART_CheckIdleState>
 80047de:	4603      	mov	r3, r0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d178      	bne.n	80048f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_UART_Transmit+0x24>
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e071      	b.n	80048f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2221      	movs	r2, #33	; 0x21
 800481c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800481e:	f7fc fcd1 	bl	80011c4 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x68>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004858:	e030      	b.n	80048bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fac9 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e03c      	b.n	80048f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	881a      	ldrh	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488c:	b292      	uxth	r2, r2
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	3302      	adds	r3, #2
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e008      	b.n	80048aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b292      	uxth	r2, r2
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1c8      	bne.n	800485a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2140      	movs	r1, #64	; 0x40
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fa92 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e005      	b.n	80048f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b8a      	ldr	r3, [pc, #552]	; (8004b50 <UART_SetConfig+0x254>)
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	430b      	orrs	r3, r1
 8004932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a78      	ldr	r2, [pc, #480]	; (8004b54 <UART_SetConfig+0x258>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d120      	bne.n	80049ba <UART_SetConfig+0xbe>
 8004978:	4b77      	ldr	r3, [pc, #476]	; (8004b58 <UART_SetConfig+0x25c>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b03      	cmp	r3, #3
 8004982:	d817      	bhi.n	80049b4 <UART_SetConfig+0xb8>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x90>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049a9 	.word	0x080049a9
 8004994:	080049af 	.word	0x080049af
 8004998:	080049a3 	.word	0x080049a3
 800499c:	2300      	movs	r3, #0
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e01d      	b.n	80049de <UART_SetConfig+0xe2>
 80049a2:	2302      	movs	r3, #2
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e01a      	b.n	80049de <UART_SetConfig+0xe2>
 80049a8:	2304      	movs	r3, #4
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e017      	b.n	80049de <UART_SetConfig+0xe2>
 80049ae:	2308      	movs	r3, #8
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e014      	b.n	80049de <UART_SetConfig+0xe2>
 80049b4:	2310      	movs	r3, #16
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e011      	b.n	80049de <UART_SetConfig+0xe2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a67      	ldr	r2, [pc, #412]	; (8004b5c <UART_SetConfig+0x260>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d102      	bne.n	80049ca <UART_SetConfig+0xce>
 80049c4:	2300      	movs	r3, #0
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e009      	b.n	80049de <UART_SetConfig+0xe2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a64      	ldr	r2, [pc, #400]	; (8004b60 <UART_SetConfig+0x264>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d102      	bne.n	80049da <UART_SetConfig+0xde>
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e001      	b.n	80049de <UART_SetConfig+0xe2>
 80049da:	2310      	movs	r3, #16
 80049dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e6:	d15a      	bne.n	8004a9e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80049e8:	7ffb      	ldrb	r3, [r7, #31]
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d827      	bhi.n	8004a3e <UART_SetConfig+0x142>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0xf8>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe fffc 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61b8      	str	r0, [r7, #24]
        break;
 8004a1e:	e013      	b.n	8004a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7ff f81a 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 8004a24:	61b8      	str	r0, [r7, #24]
        break;
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <UART_SetConfig+0x268>)
 8004a2a:	61bb      	str	r3, [r7, #24]
        break;
 8004a2c:	e00c      	b.n	8004a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe ff7b 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004a32:	61b8      	str	r0, [r7, #24]
        break;
 8004a34:	e008      	b.n	8004a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	61bb      	str	r3, [r7, #24]
        break;
 8004a3c:	e004      	b.n	8004a48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	77bb      	strb	r3, [r7, #30]
        break;
 8004a46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d074      	beq.n	8004b38 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	005a      	lsls	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	d916      	bls.n	8004a98 <UART_SetConfig+0x19c>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d212      	bcs.n	8004a98 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f023 030f 	bic.w	r3, r3, #15
 8004a7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	89fb      	ldrh	r3, [r7, #14]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	89fa      	ldrh	r2, [r7, #14]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	e04f      	b.n	8004b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	77bb      	strb	r3, [r7, #30]
 8004a9c:	e04c      	b.n	8004b38 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d828      	bhi.n	8004af6 <UART_SetConfig+0x1fa>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0x1b0>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ae1 	.word	0x08004ae1
 8004ab8:	08004af7 	.word	0x08004af7
 8004abc:	08004ae7 	.word	0x08004ae7
 8004ac0:	08004af7 	.word	0x08004af7
 8004ac4:	08004af7 	.word	0x08004af7
 8004ac8:	08004af7 	.word	0x08004af7
 8004acc:	08004aef 	.word	0x08004aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fe ffa0 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	61b8      	str	r0, [r7, #24]
        break;
 8004ad6:	e013      	b.n	8004b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f7fe ffbe 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 8004adc:	61b8      	str	r0, [r7, #24]
        break;
 8004ade:	e00f      	b.n	8004b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <UART_SetConfig+0x268>)
 8004ae2:	61bb      	str	r3, [r7, #24]
        break;
 8004ae4:	e00c      	b.n	8004b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe ff1f 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004aea:	61b8      	str	r0, [r7, #24]
        break;
 8004aec:	e008      	b.n	8004b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af2:	61bb      	str	r3, [r7, #24]
        break;
 8004af4:	e004      	b.n	8004b00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	77bb      	strb	r3, [r7, #30]
        break;
 8004afe:	bf00      	nop
    }

    if (pclk != 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d018      	beq.n	8004b38 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	085a      	lsrs	r2, r3, #1
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	441a      	add	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b0f      	cmp	r3, #15
 8004b1e:	d909      	bls.n	8004b34 <UART_SetConfig+0x238>
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d205      	bcs.n	8004b34 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	e001      	b.n	8004b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	efff69f3 	.word	0xefff69f3
 8004b54:	40013800 	.word	0x40013800
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40004400 	.word	0x40004400
 8004b60:	40004800 	.word	0x40004800
 8004b64:	007a1200 	.word	0x007a1200

08004b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01a      	beq.n	8004c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c66:	d10a      	bne.n	8004c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b098      	sub	sp, #96	; 0x60
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cbc:	f7fc fa82 	bl	80011c4 <HAL_GetTick>
 8004cc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d12e      	bne.n	8004d2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f88c 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d021      	beq.n	8004d2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d08:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e6      	bne.n	8004cea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e062      	b.n	8004df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d149      	bne.n	8004dd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f856 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03c      	beq.n	8004dd0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	623b      	str	r3, [r7, #32]
   return(result);
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d74:	633b      	str	r3, [r7, #48]	; 0x30
 8004d76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69b9      	ldr	r1, [r7, #24]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	617b      	str	r3, [r7, #20]
   return(result);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e5      	bne.n	8004d88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e011      	b.n	8004df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3758      	adds	r7, #88	; 0x58
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	e049      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d045      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fc f9d5 	bl	80011c4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e048      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d031      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d110      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f838 	bl	8004eca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e029      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7c:	d111      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f81e 	bl	8004eca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e00f      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d0a6      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b095      	sub	sp, #84	; 0x54
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e6      	bne.n	8004ed2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d118      	bne.n	8004f72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 0310 	bic.w	r3, r3, #16
 8004f54:	647b      	str	r3, [r7, #68]	; 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e6      	bne.n	8004f40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f86:	bf00      	nop
 8004f88:	3754      	adds	r7, #84	; 0x54
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa4:	2b84      	cmp	r3, #132	; 0x84
 8004fa6:	d005      	beq.n	8004fb4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fa8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	3303      	adds	r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fc6:	f000 faed 	bl	80055a4 <vTaskStartScheduler>
  
  return osOK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <osThreadCreate+0x54>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685c      	ldr	r4, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691e      	ldr	r6, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ffc8 	bl	8004f92 <makeFreeRtosPriority>
 8005002:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	9100      	str	r1, [sp, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4632      	mov	r2, r6
 8005016:	4629      	mov	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f8ed 	bl	80051f8 <xTaskCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e01c      	b.n	800505e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685c      	ldr	r4, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005030:	b29e      	uxth	r6, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffaa 	bl	8004f92 <makeFreeRtosPriority>
 800503e:	4602      	mov	r2, r0
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9200      	str	r2, [sp, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4632      	mov	r2, r6
 800504c:	4629      	mov	r1, r5
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f92e 	bl	80052b0 <xTaskCreate>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005068 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <osDelay+0x16>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e000      	b.n	8005080 <osDelay+0x18>
 800507e:	2301      	movs	r3, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa5b 	bl	800553c <vTaskDelay>
  
  return osOK;
 8005086:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e00c      	b.n	800516c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3308      	adds	r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e002      	b.n	8005160 <vListInsert+0x2e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d2f6      	bcs.n	800515a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d103      	bne.n	80051d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af04      	add	r7, sp, #16
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xTaskCreateStatic+0x46>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61fb      	str	r3, [r7, #28]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800523e:	23b4      	movs	r3, #180	; 0xb4
 8005240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2bb4      	cmp	r3, #180	; 0xb4
 8005246:	d00a      	beq.n	800525e <xTaskCreateStatic+0x66>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61bb      	str	r3, [r7, #24]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01e      	beq.n	80052a2 <xTaskCreateStatic+0xaa>
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005272:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	2202      	movs	r2, #2
 8005278:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800527c:	2300      	movs	r3, #0
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	9302      	str	r3, [sp, #8]
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f851 	bl	800533c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800529a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800529c:	f000 f8e4 	bl	8005468 <prvAddNewTaskToReadyList>
 80052a0:	e001      	b.n	80052a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052a6:	697b      	ldr	r3, [r7, #20]
	}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af04      	add	r7, sp, #16
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fef7 	bl	80060b8 <pvPortMalloc>
 80052ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052d2:	20b4      	movs	r0, #180	; 0xb4
 80052d4:	f000 fef0 	bl	80060b8 <pvPortMalloc>
 80052d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
 80052e6:	e005      	b.n	80052f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f000 ffa9 	bl	8006240 <vPortFree>
 80052ee:	e001      	b.n	80052f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	2300      	movs	r3, #0
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9302      	str	r3, [sp, #8]
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f80f 	bl	800533c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800531e:	69f8      	ldr	r0, [r7, #28]
 8005320:	f000 f8a2 	bl	8005468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005324:	2301      	movs	r3, #1
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e002      	b.n	8005330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295
 800532e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005330:	69bb      	ldr	r3, [r7, #24]
	}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005354:	3b01      	subs	r3, #1
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <prvInitialiseNewTask+0x48>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	617b      	str	r3, [r7, #20]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e012      	b.n	80053b0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	7819      	ldrb	r1, [r3, #0]
 8005392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	3334      	adds	r3, #52	; 0x34
 800539a:	460a      	mov	r2, r1
 800539c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d006      	beq.n	80053b8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d9e9      	bls.n	800538a <prvInitialiseNewTask+0x4e>
 80053b6:	e000      	b.n	80053ba <prvInitialiseNewTask+0x7e>
		{
			break;
 80053b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d901      	bls.n	80053cc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053c8:	2306      	movs	r3, #6
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	3304      	adds	r3, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fe74 	bl	80050d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	3318      	adds	r3, #24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fe6f 	bl	80050d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	f1c3 0207 	rsb	r2, r3, #7
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	334c      	adds	r3, #76	; 0x4c
 800541c:	2260      	movs	r2, #96	; 0x60
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f849 	bl	80064b8 <memset>
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	4a0c      	ldr	r2, [pc, #48]	; (800545c <prvInitialiseNewTask+0x120>)
 800542a:	651a      	str	r2, [r3, #80]	; 0x50
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <prvInitialiseNewTask+0x124>)
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <prvInitialiseNewTask+0x128>)
 8005436:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	69b8      	ldr	r0, [r7, #24]
 800543e:	f000 fc2b 	bl	8005c98 <pxPortInitialiseStack>
 8005442:	4602      	mov	r2, r0
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005454:	bf00      	nop
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	08006718 	.word	0x08006718
 8005460:	08006738 	.word	0x08006738
 8005464:	080066f8 	.word	0x080066f8

08005468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005470:	f000 fd40 	bl	8005ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <prvAddNewTaskToReadyList+0xb8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	4a29      	ldr	r2, [pc, #164]	; (8005520 <prvAddNewTaskToReadyList+0xb8>)
 800547c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <prvAddNewTaskToReadyList+0xbc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005486:	4a27      	ldr	r2, [pc, #156]	; (8005524 <prvAddNewTaskToReadyList+0xbc>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <prvAddNewTaskToReadyList+0xb8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d110      	bne.n	80054b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005494:	f000 fad2 	bl	8005a3c <prvInitialiseTaskLists>
 8005498:	e00d      	b.n	80054b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <prvAddNewTaskToReadyList+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054a2:	4b20      	ldr	r3, [pc, #128]	; (8005524 <prvAddNewTaskToReadyList+0xbc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d802      	bhi.n	80054b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <prvAddNewTaskToReadyList+0xbc>)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <prvAddNewTaskToReadyList+0xc4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	4a1b      	ldr	r2, [pc, #108]	; (800552c <prvAddNewTaskToReadyList+0xc4>)
 80054be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	2201      	movs	r2, #1
 80054c6:	409a      	lsls	r2, r3
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <prvAddNewTaskToReadyList+0xc8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <prvAddNewTaskToReadyList+0xc8>)
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <prvAddNewTaskToReadyList+0xcc>)
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7ff fdfe 	bl	80050ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ee:	f000 fd31 	bl	8005f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054f2:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <prvAddNewTaskToReadyList+0xc0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddNewTaskToReadyList+0xbc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d207      	bcs.n	8005518 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <prvAddNewTaskToReadyList+0xd0>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000744 	.word	0x20000744
 8005524:	20000644 	.word	0x20000644
 8005528:	20000750 	.word	0x20000750
 800552c:	20000760 	.word	0x20000760
 8005530:	2000074c 	.word	0x2000074c
 8005534:	20000648 	.word	0x20000648
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <vTaskDelay+0x60>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <vTaskDelay+0x30>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800556c:	f000 f884 	bl	8005678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb2a 	bl	8005bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005578:	f000 f88c 	bl	8005694 <xTaskResumeAll>
 800557c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <vTaskDelay+0x64>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	2000076c 	.word	0x2000076c
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055b2:	463a      	mov	r2, r7
 80055b4:	1d39      	adds	r1, r7, #4
 80055b6:	f107 0308 	add.w	r3, r7, #8
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa fe70 	bl	80002a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	9202      	str	r2, [sp, #8]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	460a      	mov	r2, r1
 80055d2:	4921      	ldr	r1, [pc, #132]	; (8005658 <vTaskStartScheduler+0xb4>)
 80055d4:	4821      	ldr	r0, [pc, #132]	; (800565c <vTaskStartScheduler+0xb8>)
 80055d6:	f7ff fe0f 	bl	80051f8 <xTaskCreateStatic>
 80055da:	4603      	mov	r3, r0
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <vTaskStartScheduler+0xbc>)
 80055de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055e0:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <vTaskStartScheduler+0xbc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e001      	b.n	80055f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d11b      	bne.n	8005630 <vTaskStartScheduler+0x8c>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	613b      	str	r3, [r7, #16]
}
 800560a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <vTaskStartScheduler+0xc0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	334c      	adds	r3, #76	; 0x4c
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <vTaskStartScheduler+0xc4>)
 8005614:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <vTaskStartScheduler+0xc8>)
 8005618:	f04f 32ff 	mov.w	r2, #4294967295
 800561c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <vTaskStartScheduler+0xcc>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <vTaskStartScheduler+0xd0>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800562a:	f000 fbc1 	bl	8005db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800562e:	e00e      	b.n	800564e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d10a      	bne.n	800564e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60fb      	str	r3, [r7, #12]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <vTaskStartScheduler+0xa8>
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	080066b8 	.word	0x080066b8
 800565c:	08005a0d 	.word	0x08005a0d
 8005660:	20000768 	.word	0x20000768
 8005664:	20000644 	.word	0x20000644
 8005668:	20000010 	.word	0x20000010
 800566c:	20000764 	.word	0x20000764
 8005670:	20000750 	.word	0x20000750
 8005674:	20000748 	.word	0x20000748

08005678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <vTaskSuspendAll+0x18>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a03      	ldr	r2, [pc, #12]	; (8005690 <vTaskSuspendAll+0x18>)
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	2000076c 	.word	0x2000076c

08005694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <xTaskResumeAll+0x114>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056c0:	f000 fc18 	bl	8005ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056c4:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <xTaskResumeAll+0x114>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	4a37      	ldr	r2, [pc, #220]	; (80057a8 <xTaskResumeAll+0x114>)
 80056cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ce:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <xTaskResumeAll+0x114>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d161      	bne.n	800579a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <xTaskResumeAll+0x118>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d05d      	beq.n	800579a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056de:	e02e      	b.n	800573e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056e0:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <xTaskResumeAll+0x11c>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3318      	adds	r3, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fd59 	bl	80051a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fd54 	bl	80051a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	409a      	lsls	r2, r3
 8005704:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <xTaskResumeAll+0x120>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <xTaskResumeAll+0x120>)
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <xTaskResumeAll+0x124>)
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3304      	adds	r3, #4
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7ff fce0 	bl	80050ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4b23      	ldr	r3, [pc, #140]	; (80057bc <xTaskResumeAll+0x128>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	429a      	cmp	r2, r3
 8005736:	d302      	bcc.n	800573e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <xTaskResumeAll+0x12c>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573e:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <xTaskResumeAll+0x11c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1cc      	bne.n	80056e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800574c:	f000 fa18 	bl	8005b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005750:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <xTaskResumeAll+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800575c:	f000 f836 	bl	80057cc <xTaskIncrementTick>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <xTaskResumeAll+0x12c>)
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f1      	bne.n	800575c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <xTaskResumeAll+0x130>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800577e:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <xTaskResumeAll+0x12c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800578a:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <xTaskResumeAll+0x134>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800579a:	f000 fbdb 	bl	8005f54 <vPortExitCritical>

	return xAlreadyYielded;
 800579e:	68bb      	ldr	r3, [r7, #8]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	2000076c 	.word	0x2000076c
 80057ac:	20000744 	.word	0x20000744
 80057b0:	20000704 	.word	0x20000704
 80057b4:	2000074c 	.word	0x2000074c
 80057b8:	20000648 	.word	0x20000648
 80057bc:	20000644 	.word	0x20000644
 80057c0:	20000758 	.word	0x20000758
 80057c4:	20000754 	.word	0x20000754
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d6:	4b51      	ldr	r3, [pc, #324]	; (800591c <xTaskIncrementTick+0x150>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 808d 	bne.w	80058fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057e0:	4b4f      	ldr	r3, [pc, #316]	; (8005920 <xTaskIncrementTick+0x154>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057e8:	4a4d      	ldr	r2, [pc, #308]	; (8005920 <xTaskIncrementTick+0x154>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d120      	bne.n	8005836 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057f4:	4b4b      	ldr	r3, [pc, #300]	; (8005924 <xTaskIncrementTick+0x158>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <xTaskIncrementTick+0x48>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	603b      	str	r3, [r7, #0]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskIncrementTick+0x46>
 8005814:	4b43      	ldr	r3, [pc, #268]	; (8005924 <xTaskIncrementTick+0x158>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	4b43      	ldr	r3, [pc, #268]	; (8005928 <xTaskIncrementTick+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a41      	ldr	r2, [pc, #260]	; (8005924 <xTaskIncrementTick+0x158>)
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4a41      	ldr	r2, [pc, #260]	; (8005928 <xTaskIncrementTick+0x15c>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <xTaskIncrementTick+0x160>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a3f      	ldr	r2, [pc, #252]	; (800592c <xTaskIncrementTick+0x160>)
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	f000 f9a5 	bl	8005b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <xTaskIncrementTick+0x164>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	d34d      	bcc.n	80058dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005840:	4b38      	ldr	r3, [pc, #224]	; (8005924 <xTaskIncrementTick+0x158>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <xTaskIncrementTick+0x82>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xTaskIncrementTick+0x84>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	4b36      	ldr	r3, [pc, #216]	; (8005930 <xTaskIncrementTick+0x164>)
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	601a      	str	r2, [r3, #0]
					break;
 800585c:	e03e      	b.n	80058dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <xTaskIncrementTick+0x158>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005876:	4a2e      	ldr	r2, [pc, #184]	; (8005930 <xTaskIncrementTick+0x164>)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6013      	str	r3, [r2, #0]
						break;
 800587c:	e02e      	b.n	80058dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fc8e 	bl	80051a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3318      	adds	r3, #24
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fc85 	bl	80051a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <xTaskIncrementTick+0x168>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <xTaskIncrementTick+0x168>)
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <xTaskIncrementTick+0x16c>)
 80058ba:	441a      	add	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f7ff fc11 	bl	80050ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <xTaskIncrementTick+0x170>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3b4      	bcc.n	8005840 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058da:	e7b1      	b.n	8005840 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <xTaskIncrementTick+0x170>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e2:	4915      	ldr	r1, [pc, #84]	; (8005938 <xTaskIncrementTick+0x16c>)
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d907      	bls.n	8005904 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e004      	b.n	8005904 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <xTaskIncrementTick+0x174>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <xTaskIncrementTick+0x174>)
 8005902:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <xTaskIncrementTick+0x178>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005910:	697b      	ldr	r3, [r7, #20]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	2000076c 	.word	0x2000076c
 8005920:	20000748 	.word	0x20000748
 8005924:	200006fc 	.word	0x200006fc
 8005928:	20000700 	.word	0x20000700
 800592c:	2000075c 	.word	0x2000075c
 8005930:	20000764 	.word	0x20000764
 8005934:	2000074c 	.word	0x2000074c
 8005938:	20000648 	.word	0x20000648
 800593c:	20000644 	.word	0x20000644
 8005940:	20000754 	.word	0x20000754
 8005944:	20000758 	.word	0x20000758

08005948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800594e:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <vTaskSwitchContext+0xac>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005956:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <vTaskSwitchContext+0xb0>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800595c:	e044      	b.n	80059e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <vTaskSwitchContext+0xb0>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <vTaskSwitchContext+0xb4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	f1c3 031f 	rsb	r3, r3, #31
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	4921      	ldr	r1, [pc, #132]	; (8005a00 <vTaskSwitchContext+0xb8>)
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vTaskSwitchContext+0x5a>
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <vTaskSwitchContext+0xb8>)
 80059b0:	4413      	add	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3308      	adds	r3, #8
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d104      	bne.n	80059d4 <vTaskSwitchContext+0x8c>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <vTaskSwitchContext+0xbc>)
 80059dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <vTaskSwitchContext+0xbc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	334c      	adds	r3, #76	; 0x4c
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <vTaskSwitchContext+0xc0>)
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	2000076c 	.word	0x2000076c
 80059f8:	20000758 	.word	0x20000758
 80059fc:	2000074c 	.word	0x2000074c
 8005a00:	20000648 	.word	0x20000648
 8005a04:	20000644 	.word	0x20000644
 8005a08:	20000010 	.word	0x20000010

08005a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a14:	f000 f852 	bl	8005abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <prvIdleTask+0x28>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d9f9      	bls.n	8005a14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <prvIdleTask+0x2c>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a30:	e7f0      	b.n	8005a14 <prvIdleTask+0x8>
 8005a32:	bf00      	nop
 8005a34:	20000648 	.word	0x20000648
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	e00c      	b.n	8005a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <prvInitialiseTaskLists+0x60>)
 8005a54:	4413      	add	r3, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fb1a 	bl	8005090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d9ef      	bls.n	8005a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a68:	480d      	ldr	r0, [pc, #52]	; (8005aa0 <prvInitialiseTaskLists+0x64>)
 8005a6a:	f7ff fb11 	bl	8005090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a6e:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <prvInitialiseTaskLists+0x68>)
 8005a70:	f7ff fb0e 	bl	8005090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a74:	480c      	ldr	r0, [pc, #48]	; (8005aa8 <prvInitialiseTaskLists+0x6c>)
 8005a76:	f7ff fb0b 	bl	8005090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a7a:	480c      	ldr	r0, [pc, #48]	; (8005aac <prvInitialiseTaskLists+0x70>)
 8005a7c:	f7ff fb08 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a80:	480b      	ldr	r0, [pc, #44]	; (8005ab0 <prvInitialiseTaskLists+0x74>)
 8005a82:	f7ff fb05 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <prvInitialiseTaskLists+0x78>)
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <prvInitialiseTaskLists+0x64>)
 8005a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <prvInitialiseTaskLists+0x7c>)
 8005a8e:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <prvInitialiseTaskLists+0x68>)
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000648 	.word	0x20000648
 8005aa0:	200006d4 	.word	0x200006d4
 8005aa4:	200006e8 	.word	0x200006e8
 8005aa8:	20000704 	.word	0x20000704
 8005aac:	20000718 	.word	0x20000718
 8005ab0:	20000730 	.word	0x20000730
 8005ab4:	200006fc 	.word	0x200006fc
 8005ab8:	20000700 	.word	0x20000700

08005abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac2:	e019      	b.n	8005af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ac4:	f000 fa16 	bl	8005ef4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ac8:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <prvCheckTasksWaitingTermination+0x50>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fb65 	bl	80051a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <prvCheckTasksWaitingTermination+0x54>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <prvCheckTasksWaitingTermination+0x54>)
 8005ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aee:	f000 fa31 	bl	8005f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f810 	bl	8005b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvCheckTasksWaitingTermination+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e1      	bne.n	8005ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000718 	.word	0x20000718
 8005b10:	20000744 	.word	0x20000744
 8005b14:	2000072c 	.word	0x2000072c

08005b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	334c      	adds	r3, #76	; 0x4c
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fcdd 	bl	80064e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fb81 	bl	8006240 <vPortFree>
				vPortFree( pxTCB );
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fb7e 	bl	8006240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b44:	e018      	b.n	8005b78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d103      	bne.n	8005b58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb75 	bl	8006240 <vPortFree>
	}
 8005b56:	e00f      	b.n	8005b78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d00a      	beq.n	8005b78 <prvDeleteTCB+0x60>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60fb      	str	r3, [r7, #12]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <prvDeleteTCB+0x5e>
	}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <prvResetNextTaskUnblockTime+0x44>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <prvResetNextTaskUnblockTime+0x14>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <prvResetNextTaskUnblockTime+0x16>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <prvResetNextTaskUnblockTime+0x48>)
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ba2:	e008      	b.n	8005bb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <prvResetNextTaskUnblockTime+0x44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <prvResetNextTaskUnblockTime+0x48>)
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	200006fc 	.word	0x200006fc
 8005bc8:	20000764 	.word	0x20000764

08005bcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bd6:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fade 	bl	80051a4 <uxListRemove>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d10a      	bne.n	8005c24 <prvAddCurrentTaskToDelayedList+0x58>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c14:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	481a      	ldr	r0, [pc, #104]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c1e:	f7ff fa64 	bl	80050ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c22:	e026      	b.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d209      	bcs.n	8005c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f7ff fa72 	bl	8005132 <vListInsert>
}
 8005c4e:	e010      	b.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7ff fa68 	bl	8005132 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d202      	bcs.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c6c:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6013      	str	r3, [r2, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000748 	.word	0x20000748
 8005c80:	20000644 	.word	0x20000644
 8005c84:	2000074c 	.word	0x2000074c
 8005c88:	20000730 	.word	0x20000730
 8005c8c:	20000700 	.word	0x20000700
 8005c90:	200006fc 	.word	0x200006fc
 8005c94:	20000764 	.word	0x20000764

08005c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <pxPortInitialiseStack+0x64>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b14      	subs	r3, #20
 8005cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f06f 0202 	mvn.w	r2, #2
 8005ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3b20      	subs	r3, #32
 8005cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	08005d01 	.word	0x08005d01

08005d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <prvTaskExitError+0x54>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d00a      	beq.n	8005d2a <prvTaskExitError+0x2a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <prvTaskExitError+0x28>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60bb      	str	r3, [r7, #8]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d3e:	bf00      	nop
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0fc      	beq.n	8005d40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	2000000c 	.word	0x2000000c
	...

08005d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <pxCurrentTCBConst2>)
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	f380 8809 	msr	PSP, r0
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	4770      	bx	lr
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst2>:
 8005d80:	20000644 	.word	0x20000644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d88:	4808      	ldr	r0, [pc, #32]	; (8005dac <prvPortStartFirstTask+0x24>)
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f380 8808 	msr	MSP, r0
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8814 	msr	CONTROL, r0
 8005d9a:	b662      	cpsie	i
 8005d9c:	b661      	cpsie	f
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	df00      	svc	0
 8005da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005daa:	bf00      	nop
 8005dac:	e000ed08 	.word	0xe000ed08

08005db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <xPortStartScheduler+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10a      	bne.n	8005dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <xPortStartScheduler+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10a      	bne.n	8005df6 <xPortStartScheduler+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xPortStartScheduler+0x12c>)
 8005df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <xPortStartScheduler+0x130>)
 8005e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e24:	e009      	b.n	8005e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d0ef      	beq.n	8005e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00a      	beq.n	8005e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e9e:	f000 f8dd 	bl	800605c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <xPortStartScheduler+0x13c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ea8:	f000 f8fc 	bl	80060a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eb8:	f7ff ff66 	bl	8005d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ebc:	f7ff fd44 	bl	8005948 <vTaskSwitchContext>
	prvTaskExitError();
 8005ec0:	f7ff ff1e 	bl	8005d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	410fc271 	.word	0x410fc271
 8005ed8:	410fc270 	.word	0x410fc270
 8005edc:	e000e400 	.word	0xe000e400
 8005ee0:	20000770 	.word	0x20000770
 8005ee4:	20000774 	.word	0x20000774
 8005ee8:	e000ed20 	.word	0xe000ed20
 8005eec:	2000000c 	.word	0x2000000c
 8005ef0:	e000ef34 	.word	0xe000ef34

08005ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10f      	bne.n	8005f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <vPortEnterCritical+0x5c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vPortEnterCritical+0x4a>
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	2000000c 	.word	0x2000000c
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vPortExitCritical+0x24>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <vPortExitCritical+0x42>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
	...

08005fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fb0:	f3ef 8009 	mrs	r0, PSP
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <pxCurrentTCBConst>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f01e 0f10 	tst.w	lr, #16
 8005fc0:	bf08      	it	eq
 8005fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fd4:	f380 8811 	msr	BASEPRI, r0
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f7ff fcb2 	bl	8005948 <vTaskSwitchContext>
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f380 8811 	msr	BASEPRI, r0
 8005fec:	bc09      	pop	{r0, r3}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff6:	f01e 0f10 	tst.w	lr, #16
 8005ffa:	bf08      	it	eq
 8005ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006000:	f380 8809 	msr	PSP, r0
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst>:
 8006010:	20000644 	.word	0x20000644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006032:	f7ff fbcb 	bl	80057cc <xTaskIncrementTick>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <SysTick_Handler+0x40>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <vPortSetupTimerInterrupt+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <vPortSetupTimerInterrupt+0x3c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x40>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <vPortSetupTimerInterrupt+0x44>)
 800607a:	3b01      	subs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006080:	2207      	movs	r2, #7
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	e000e010 	.word	0xe000e010
 8006094:	e000e018 	.word	0xe000e018
 8006098:	20000000 	.word	0x20000000
 800609c:	10624dd3 	.word	0x10624dd3
 80060a0:	e000e014 	.word	0xe000e014

080060a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060b4 <vPortEnableVFP+0x10>
 80060a8:	6801      	ldr	r1, [r0, #0]
 80060aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ae:	6001      	str	r1, [r0, #0]
 80060b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060b2:	bf00      	nop
 80060b4:	e000ed88 	.word	0xe000ed88

080060b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060c4:	f7ff fad8 	bl	8005678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060c8:	4b58      	ldr	r3, [pc, #352]	; (800622c <pvPortMalloc+0x174>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060d0:	f000 f910 	bl	80062f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060d4:	4b56      	ldr	r3, [pc, #344]	; (8006230 <pvPortMalloc+0x178>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 808e 	bne.w	80061fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01d      	beq.n	8006124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060e8:	2208      	movs	r2, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	3308      	adds	r3, #8
 8006102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <pvPortMalloc+0x6c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	617b      	str	r3, [r7, #20]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d069      	beq.n	80061fe <pvPortMalloc+0x146>
 800612a:	4b42      	ldr	r3, [pc, #264]	; (8006234 <pvPortMalloc+0x17c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d864      	bhi.n	80061fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006134:	4b40      	ldr	r3, [pc, #256]	; (8006238 <pvPortMalloc+0x180>)
 8006136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006138:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <pvPortMalloc+0x180>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613e:	e004      	b.n	800614a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d903      	bls.n	800615c <pvPortMalloc+0xa4>
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f1      	bne.n	8006140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800615c:	4b33      	ldr	r3, [pc, #204]	; (800622c <pvPortMalloc+0x174>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	429a      	cmp	r2, r3
 8006164:	d04b      	beq.n	80061fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2208      	movs	r2, #8
 800616c:	4413      	add	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	2308      	movs	r3, #8
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	429a      	cmp	r2, r3
 8006186:	d91f      	bls.n	80061c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <pvPortMalloc+0xf8>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	613b      	str	r3, [r7, #16]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061c2:	69b8      	ldr	r0, [r7, #24]
 80061c4:	f000 f8f8 	bl	80063b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <pvPortMalloc+0x17c>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <pvPortMalloc+0x17c>)
 80061d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061d6:	4b17      	ldr	r3, [pc, #92]	; (8006234 <pvPortMalloc+0x17c>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b18      	ldr	r3, [pc, #96]	; (800623c <pvPortMalloc+0x184>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d203      	bcs.n	80061ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <pvPortMalloc+0x17c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <pvPortMalloc+0x184>)
 80061e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <pvPortMalloc+0x178>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061fe:	f7ff fa49 	bl	8005694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <pvPortMalloc+0x16a>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <pvPortMalloc+0x168>
	return pvReturn;
 8006222:	69fb      	ldr	r3, [r7, #28]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20001380 	.word	0x20001380
 8006230:	2000138c 	.word	0x2000138c
 8006234:	20001384 	.word	0x20001384
 8006238:	20001378 	.word	0x20001378
 800623c:	20001388 	.word	0x20001388

08006240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d048      	beq.n	80062e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006252:	2308      	movs	r3, #8
 8006254:	425b      	negs	r3, r3
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <vPortFree+0xac>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <vPortFree+0x44>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <vPortFree+0x62>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60bb      	str	r3, [r7, #8]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <vPortFree+0xac>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d115      	bne.n	80062e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <vPortFree+0xac>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062c8:	f7ff f9d6 	bl	8005678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <vPortFree+0xb0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <vPortFree+0xb0>)
 80062d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f86c 	bl	80063b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062e0:	f7ff f9d8 	bl	8005694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062e4:	bf00      	nop
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	2000138c 	.word	0x2000138c
 80062f0:	20001384 	.word	0x20001384

080062f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80062fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006300:	4b27      	ldr	r3, [pc, #156]	; (80063a0 <prvHeapInit+0xac>)
 8006302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <prvHeapInit+0xac>)
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <prvHeapInit+0xb0>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <prvHeapInit+0xb0>)
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006340:	2208      	movs	r2, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <prvHeapInit+0xb4>)
 8006354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <prvHeapInit+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <prvHeapInit+0xb4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <prvHeapInit+0xb4>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <prvHeapInit+0xb8>)
 8006382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <prvHeapInit+0xbc>)
 800638a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <prvHeapInit+0xc0>)
 800638e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000778 	.word	0x20000778
 80063a4:	20001378 	.word	0x20001378
 80063a8:	20001380 	.word	0x20001380
 80063ac:	20001388 	.word	0x20001388
 80063b0:	20001384 	.word	0x20001384
 80063b4:	2000138c 	.word	0x2000138c

080063b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <prvInsertBlockIntoFreeList+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <prvInsertBlockIntoFreeList+0x14>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d8f7      	bhi.n	80063c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d108      	bne.n	80063fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d118      	bne.n	8006440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d00d      	beq.n	8006436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e008      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e003      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20001378 	.word	0x20001378
 8006468:	20001380 	.word	0x20001380

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f000 f8e4 	bl	800664c <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	08006758 	.word	0x08006758
 80064a8:	08006758 	.word	0x08006758
 80064ac:	08006758 	.word	0x08006758
 80064b0:	0800675c 	.word	0x0800675c

080064b4 <__retarget_lock_acquire_recursive>:
 80064b4:	4770      	bx	lr

080064b6 <__retarget_lock_release_recursive>:
 80064b6:	4770      	bx	lr

080064b8 <memset>:
 80064b8:	4402      	add	r2, r0
 80064ba:	4603      	mov	r3, r0
 80064bc:	4293      	cmp	r3, r2
 80064be:	d100      	bne.n	80064c2 <memset+0xa>
 80064c0:	4770      	bx	lr
 80064c2:	f803 1b01 	strb.w	r1, [r3], #1
 80064c6:	e7f9      	b.n	80064bc <memset+0x4>

080064c8 <cleanup_glue>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	460c      	mov	r4, r1
 80064cc:	6809      	ldr	r1, [r1, #0]
 80064ce:	4605      	mov	r5, r0
 80064d0:	b109      	cbz	r1, 80064d6 <cleanup_glue+0xe>
 80064d2:	f7ff fff9 	bl	80064c8 <cleanup_glue>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064de:	f000 b869 	b.w	80065b4 <_free_r>
	...

080064e4 <_reclaim_reent>:
 80064e4:	4b2c      	ldr	r3, [pc, #176]	; (8006598 <_reclaim_reent+0xb4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4283      	cmp	r3, r0
 80064ea:	b570      	push	{r4, r5, r6, lr}
 80064ec:	4604      	mov	r4, r0
 80064ee:	d051      	beq.n	8006594 <_reclaim_reent+0xb0>
 80064f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064f2:	b143      	cbz	r3, 8006506 <_reclaim_reent+0x22>
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d14a      	bne.n	8006590 <_reclaim_reent+0xac>
 80064fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	b111      	cbz	r1, 8006506 <_reclaim_reent+0x22>
 8006500:	4620      	mov	r0, r4
 8006502:	f000 f857 	bl	80065b4 <_free_r>
 8006506:	6961      	ldr	r1, [r4, #20]
 8006508:	b111      	cbz	r1, 8006510 <_reclaim_reent+0x2c>
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f852 	bl	80065b4 <_free_r>
 8006510:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006512:	b111      	cbz	r1, 800651a <_reclaim_reent+0x36>
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f84d 	bl	80065b4 <_free_r>
 800651a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800651c:	b111      	cbz	r1, 8006524 <_reclaim_reent+0x40>
 800651e:	4620      	mov	r0, r4
 8006520:	f000 f848 	bl	80065b4 <_free_r>
 8006524:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006526:	b111      	cbz	r1, 800652e <_reclaim_reent+0x4a>
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f843 	bl	80065b4 <_free_r>
 800652e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006530:	b111      	cbz	r1, 8006538 <_reclaim_reent+0x54>
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f83e 	bl	80065b4 <_free_r>
 8006538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800653a:	b111      	cbz	r1, 8006542 <_reclaim_reent+0x5e>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f839 	bl	80065b4 <_free_r>
 8006542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006544:	b111      	cbz	r1, 800654c <_reclaim_reent+0x68>
 8006546:	4620      	mov	r0, r4
 8006548:	f000 f834 	bl	80065b4 <_free_r>
 800654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654e:	b111      	cbz	r1, 8006556 <_reclaim_reent+0x72>
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f82f 	bl	80065b4 <_free_r>
 8006556:	69a3      	ldr	r3, [r4, #24]
 8006558:	b1e3      	cbz	r3, 8006594 <_reclaim_reent+0xb0>
 800655a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800655c:	4620      	mov	r0, r4
 800655e:	4798      	blx	r3
 8006560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006562:	b1b9      	cbz	r1, 8006594 <_reclaim_reent+0xb0>
 8006564:	4620      	mov	r0, r4
 8006566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800656a:	f7ff bfad 	b.w	80064c8 <cleanup_glue>
 800656e:	5949      	ldr	r1, [r1, r5]
 8006570:	b941      	cbnz	r1, 8006584 <_reclaim_reent+0xa0>
 8006572:	3504      	adds	r5, #4
 8006574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006576:	2d80      	cmp	r5, #128	; 0x80
 8006578:	68d9      	ldr	r1, [r3, #12]
 800657a:	d1f8      	bne.n	800656e <_reclaim_reent+0x8a>
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f819 	bl	80065b4 <_free_r>
 8006582:	e7ba      	b.n	80064fa <_reclaim_reent+0x16>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f814 	bl	80065b4 <_free_r>
 800658c:	4631      	mov	r1, r6
 800658e:	e7ef      	b.n	8006570 <_reclaim_reent+0x8c>
 8006590:	2500      	movs	r5, #0
 8006592:	e7ef      	b.n	8006574 <_reclaim_reent+0x90>
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	bf00      	nop
 8006598:	20000010 	.word	0x20000010

0800659c <__malloc_lock>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__malloc_lock+0x8>)
 800659e:	f7ff bf89 	b.w	80064b4 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	20001390 	.word	0x20001390

080065a8 <__malloc_unlock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_unlock+0x8>)
 80065aa:	f7ff bf84 	b.w	80064b6 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	20001390 	.word	0x20001390

080065b4 <_free_r>:
 80065b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d044      	beq.n	8006644 <_free_r+0x90>
 80065ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065be:	9001      	str	r0, [sp, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f1a1 0404 	sub.w	r4, r1, #4
 80065c6:	bfb8      	it	lt
 80065c8:	18e4      	addlt	r4, r4, r3
 80065ca:	f7ff ffe7 	bl	800659c <__malloc_lock>
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <_free_r+0x94>)
 80065d0:	9801      	ldr	r0, [sp, #4]
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	b933      	cbnz	r3, 80065e4 <_free_r+0x30>
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6014      	str	r4, [r2, #0]
 80065da:	b003      	add	sp, #12
 80065dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065e0:	f7ff bfe2 	b.w	80065a8 <__malloc_unlock>
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d908      	bls.n	80065fa <_free_r+0x46>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf01      	itttt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	1949      	addeq	r1, r1, r5
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	e7ed      	b.n	80065d6 <_free_r+0x22>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x50>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x46>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1855      	adds	r5, r2, r1
 8006608:	42a5      	cmp	r5, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x70>
 800660c:	6824      	ldr	r4, [r4, #0]
 800660e:	4421      	add	r1, r4
 8006610:	1854      	adds	r4, r2, r1
 8006612:	42a3      	cmp	r3, r4
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1e0      	bne.n	80065da <_free_r+0x26>
 8006618:	681c      	ldr	r4, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4421      	add	r1, r4
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	e7da      	b.n	80065da <_free_r+0x26>
 8006624:	d902      	bls.n	800662c <_free_r+0x78>
 8006626:	230c      	movs	r3, #12
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	e7d6      	b.n	80065da <_free_r+0x26>
 800662c:	6825      	ldr	r5, [r4, #0]
 800662e:	1961      	adds	r1, r4, r5
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1949      	addeq	r1, r1, r5
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7ca      	b.n	80065da <_free_r+0x26>
 8006644:	b003      	add	sp, #12
 8006646:	bd30      	pop	{r4, r5, pc}
 8006648:	20001394 	.word	0x20001394

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
